openapi: "3.0.0"
info:
  version: 1.0.0
  title: "BiteScout API"
  description: "API documentation for BiteScout"
servers:
  - url: http://localhost:5001
paths:
  /api/auth/register:
   
    post:
      summary: Register a new user
      description: Register a new user with the provided details
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - firstName
                - lastName
                - email
                - password
              properties:
                firstName:
                  type: string
                  example: Anthony
                lastName:
                  type: string
                  example: Ukutegbe
                email:
                  type: string
                  format: email
                  example: anthony@test.com
                password:
                  type: string
                  format: password
                  example: strongPassword123

      responses:
        201:
          description: Successfully registered user
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Registration successful
                  user:
                    type: object
                    properties:
                      name:
                        type: string
                        example: Anthony Ukutegbe
                      email:
                        type: string
                        format: email
                        example: anthony@test.com
                      userType:
                        $ref: "#/components/schemas/UserType"
                        description: "User role/type"
        400:
          description: Missing required field or invalid user type
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Missing required field or user type not found
        409:
          description: Conflict – User already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User already exists
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                userCreationError:
                  summary: Error creating User
                  value:
                    message: Error creating user
                    error: Database conection failed
  /api/auth/login:
    summary: Authenticate a user
    description: Authenticate a user and return access and refresh token
    post:  # Changed from get to post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: anthony@test.com
                password:
                  type: string
                  format: password
                  example: strongPassword123
      responses:
        200:
          description: Login Successfull
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Login successful
                  user:
                    $ref: "#/components/schemas/User"
                  accessToken:
                    type: string
                    example: -access token here-
                  refreshToken:
                    type: string
                    example: -refresh token here-
                  expiresIn:
                    type: integer
                    format: int64
                    description: "Expiration time as a Unix timestamp in milliseconds"
                    example: 1713649200000
        400:
          description: Missing required field or invalid credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /api/auth/refresh:
    summary: Refresh authentication token
    description: Refreshes the authentication token with the provided refresh token
    post:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refreshToken
              properties:
                refreshToken:
                  type: string
                  example: -refresh token here-

      responses:
        200:
          description: Token refresh successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Refresh Token Successfull
                  accessToken:
                    type: string
                    example: -new access token here-
                  refreshToken:
                    type: string
                    example: -new refresh token here-
                  expiresIn:
                    type: integer
                    format: int64
                    description: Expiration time as a Unix timestamp in milliseconds
                    example: 1713649200000
        400:
          description: Refresh token not found or Invalid Token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        401:
          description: Internal Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /api/user/{userId}:
    summary: Update a user
    put:
      parameters:
        - in: path
          name: userId
          required: true
          description: The ID of the user to update
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        200:
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /api/restaurants:
    post:
      summary: Create a new restaurant
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Restaurant"
      responses:
        201:
          description: Restaurant created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Restaurant"
    get:
      summary: Get all restaurants
      responses:
        200:
          description: List of restaurants
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Restaurant"
  /api/restaurants/owner/{userId}:
    get:
      summary: Get restaurant by owner ID
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        200:
          description: Restaurant for owner
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Restaurant"
  /api/restaurants/owner-restaurants/{userId}:
    get:
      summary: Get all restaurants for an owner
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        200:
          description: List of restaurants for owner
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Restaurant"
  /api/restaurants/search/{name}:
    get:
      summary: Search restaurants by name
      parameters:
        - in: path
          name: name
          required: true
          description: Restaurant name to search for
          schema:
            type: string
            example: "Pizza"
      responses:
        200:
          description: List of matching restaurants
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Restaurant"
        400:
          description: Restaurant name is required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /api/restaurants/filter:
    get:
      summary: Filter restaurants by various criteria including feature categories
      parameters:
        - in: query
          name: name
          description: Restaurant name to search for
          schema:
            type: string
            example: "Pizza"
        - in: query
          name: cuisine
          description: Cuisine type to filter by
          schema:
            type: string
            example: "Italian"
        - in: query
          name: priceRange
          description: Price range to filter by
          schema:
            type: string
            enum: ["$", "$$", "$$$", "$$$$"]
            example: "$$"
        - in: query
          name: features
          description: Comma-separated list of specific features to filter by
          schema:
            type: string
            example: "Outdoor seating,Delivery,Free WiFi"
        - in: query
          name: featureCategories
          description: Comma-separated list of feature categories to filter by
          schema:
            type: string
            example: "Seating & Dining,Service Types"
        - in: query
          name: page
          description: Page number for pagination
          schema:
            type: integer
            default: 1
            minimum: 1
            example: 1
        - in: query
          name: limit
          description: Number of results per page
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
            example: 10
      responses:
        200:
          description: List of filtered restaurants
          content:
            application/json:
              schema:
                type: object
                properties:
                  restaurants:
                    type: array
                    items:
                      $ref: "#/components/schemas/Restaurant"
                  pagination:
                    type: object
                    properties:
                      currentPage:
                        type: integer
                        example: 1
                      totalPages:
                        type: integer
                        example: 5
                      totalRestaurants:
                        type: integer
                        example: 50
                      hasNextPage:
                        type: boolean
                        example: true
                      hasPrevPage:
                        type: boolean
                        example: false
                  filters:
                    type: object
                    properties:
                      applied:
                        type: object
                        description: "Currently applied filters"
                      available:
                        type: object
                        description: "Available filter options"
        400:
          description: Invalid filter parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /api/restaurants/{id}:
    get:
      summary: Get restaurant by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        200:
          description: Restaurant details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Restaurant"
    put:
      summary: Update restaurant
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Restaurant"
      responses:
        200:
          description: Restaurant updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Restaurant"
    delete:
      summary: Delete restaurant
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        204:
          description: Restaurant deleted

  /api/restaurants/{id}/delivery-links:
    get:
      summary: Get delivery links for a restaurant
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Restaurant ID
      responses:
        200:
          description: List of delivery links
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DeliveryLink"
        404:
          description: Restaurant not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    post:
      summary: Add a delivery link to a restaurant
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Restaurant ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - url
                - platform
              properties:
                name:
                  type: string
                  description: "Display name for the delivery link"
                  example: "Uber Eats"
                url:
                  type: string
                  format: uri
                  description: "URL to the delivery service"
                  example: "https://ubereats.com/restaurant/123"
                platform:
                  type: string
                  enum:
                    - "Uber Eats"
                    - "DoorDash"
                    - "Grubhub"
                    - "Postmates"
                    - "Instacart"
                    - "Amazon Fresh"
                    - "Walmart Grocery"
                    - "Shipt"
                    - "Custom"
                    - "Other"
                  description: "Delivery platform name"
                  example: "Uber Eats"
                isActive:
                  type: boolean
                  default: true
                  description: "Whether this delivery link is active"
      responses:
        201:
          description: Delivery link created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeliveryLink"
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        404:
          description: Restaurant not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/restaurants/{id}/assigned-images:
    put:
      summary: Update assigned images for a restaurant (logo and profile image)
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Restaurant ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                logo:
                  type: string
                  nullable: true
                  description: "Media ID for logo (null to remove assignment)"
                  example: "507f1f77bcf86cd799439011"
                profileImage:
                  type: string
                  nullable: true
                  description: "Media ID for profile image (null to remove assignment)"
                  example: "507f1f77bcf86cd799439011"
      responses:
        200:
          description: Assigned images updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Restaurant"
        400:
          description: Invalid input or media not in gallery
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        404:
          description: Restaurant not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/restaurants/{id}/delivery-links/{linkId}:
    put:
      summary: Update a delivery link
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Restaurant ID
        - in: path
          name: linkId
          required: true
          schema:
            type: string
          description: Delivery link ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: "Display name for the delivery link"
                url:
                  type: string
                  format: uri
                  description: "URL to the delivery service"
                platform:
                  type: string
                  enum:
                    - "Uber Eats"
                    - "DoorDash"
                    - "Grubhub"
                    - "Postmates"
                    - "Instacart"
                    - "Amazon Fresh"
                    - "Walmart Grocery"
                    - "Shipt"
                    - "Custom"
                    - "Other"
                  description: "Delivery platform name"
                isActive:
                  type: boolean
                  description: "Whether this delivery link is active"
      responses:
        200:
          description: Delivery link updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeliveryLink"
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        404:
          description: Restaurant or delivery link not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      summary: Delete a delivery link
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Restaurant ID
        - in: path
          name: linkId
          required: true
          schema:
            type: string
          description: Delivery link ID
      responses:
        204:
          description: Delivery link deleted
        404:
          description: Restaurant or delivery link not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /api/food-catalogue/restaurant/{restaurantId}/catalogue/{foodId}:
    get:
      summary: Get food catalogue item by ID
      parameters:
        - in: path
          name: restaurantId
          required: true
          schema:
            type: string
        - in: path
          name: foodId
          required: true
          schema:
            type: string
      responses:
        200:
          description: Food catalogue item
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FoodCatalogue"
    put:
      summary: Update food catalogue item
      parameters:
        - in: path
          name: restaurantId
          required: true
          schema:
            type: string
        - in: path
          name: foodId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FoodCatalogue"
      responses:
        200:
          description: Food catalogue item updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FoodCatalogue"
    delete:
      summary: Delete food catalogue item
      parameters:
        - in: path
          name: restaurantId
          required: true
          schema:
            type: string
        - in: path
          name: foodId
          required: true
          schema:
            type: string
      responses:
        204:
          description: Food catalogue item deleted
  /api/food-catalogue/restaurant/{restaurantId}:
    get:
      summary: Get all food catalogue items for a restaurant
      parameters:
        - in: path
          name: restaurantId
          required: true
          schema:
            type: string
      responses:
        200:
          description: List of food catalogue items (empty array if no items found)
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FoodCatalogue"
  /api/food-catalogue:
    post:
      summary: Create a new food catalogue item
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FoodCatalogue"
      responses:
        201:
          description: Food catalogue item created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FoodCatalogue"
  /api/food-catalogue/search:
    get:
      summary: Search food items across all restaurants
      description: Search for food items by name, ingredients, cuisine, price range, and other criteria across all restaurants
      parameters:
        - in: query
          name: q
          description: Search query for food name, ingredients, or keywords
          schema:
            type: string
            example: "pizza margherita"
        - in: query
          name: cuisine
          description: Filter by cuisine type
          schema:
            type: string
            example: "Italian"
        - in: query
          name: course
          description: Filter by course type (starter, main, dessert, etc.)
          schema:
            type: string
            example: "main"
        - in: query
          name: priceRange
          description: Filter by price range
          schema:
            type: string
            enum: ["$", "$$", "$$$", "$$$$"]
            example: "$$"
        - in: query
          name: allergens
          description: Comma-separated list of allergens to exclude
          schema:
            type: string
            example: "gluten,dairy"
        - in: query
          name: isAvailable
          description: Filter by availability status
          schema:
            type: boolean
            example: true
        - in: query
          name: isFeatured
          description: Filter by featured status
          schema:
            type: boolean
            example: false
        - in: query
          name: sortBy
          description: Sort results by field
          schema:
            type: string
            enum: ["name", "price", "popularity", "rating", "trending"]
            default: "popularity"
            example: "popularity"
        - in: query
          name: sortOrder
          description: Sort order
          schema:
            type: string
            enum: ["asc", "desc"]
            default: "desc"
            example: "desc"
        - in: query
          name: page
          description: Page number for pagination
          schema:
            type: integer
            default: 1
            minimum: 1
            example: 1
        - in: query
          name: limit
          description: Number of results per page
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
            example: 20
      responses:
        200:
          description: Search results with pagination
          content:
            application/json:
              schema:
                type: object
                properties:
                  foods:
                    type: array
                    items:
                      $ref: "#/components/schemas/FoodCatalogue"
                    description: "List of food items matching the search criteria"
                  restaurants:
                    type: array
                    items:
                      $ref: "#/components/schemas/Restaurant"
                    description: "List of restaurants offering the found foods"
                  pagination:
                    type: object
                    properties:
                      currentPage:
                        type: integer
                        description: "Current page number"
                        example: 1
                      totalPages:
                        type: integer
                        description: "Total number of pages"
                        example: 5
                      totalFoods:
                        type: integer
                        description: "Total number of food items found"
                        example: 95
                      hasNextPage:
                        type: boolean
                        description: "Whether there are more pages"
                        example: true
                      hasPrevPage:
                        type: boolean
                        description: "Whether there are previous pages"
                        example: false
                  filters:
                    type: object
                    properties:
                      applied:
                        type: object
                        description: "Currently applied filters"
                        example:
                          q: "pizza"
                          cuisine: "Italian"
                          priceRange: "$$"
                      available:
                        type: object
                        description: "Available filter options for current results"
                        example:
                          cuisines: ["Italian", "American", "Mexican"]
                          courses: ["main", "starter", "dessert"]
                          priceRanges: ["$", "$$", "$$$"]
        400:
          description: Invalid search parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /api/notifications/{userId}:
    get:
      summary: Get notifications for a user
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        200:
          description: List of notifications
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Notification"
  /api/notifications/{userId}/{notificationId}/read:
    patch:
      summary: Mark a notification as read
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
        - in: path
          name: notificationId
          required: true
          schema:
            type: string
      responses:
        200:
          description: Notification marked as read
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Notification"
  /api/notifications/{userId}/read-all:
    patch:
      summary: Mark all notifications as read
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        200:
          description: All notifications marked as read
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "All notifications marked as read"
                  updatedCount:
                    type: integer
                    example: 5
  /api/restaurant-access/{restaurantId}:
    post:
      summary: Request access to a restaurant
      parameters:
        - in: path
          name: restaurantId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
      responses:
        201:
          description: Access request created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Authorization request sent successfully"
                  restaurantAccess:
                    $ref: "#/components/schemas/RestaurantAccess"
  /api/restaurant-access/user/{userId}:
    get:
      summary: Get restaurant access by user ID
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        200:
          description: List of restaurant access for user (empty array if no access records found)
          content:
            application/json:
              schema:
                type: object
                properties:
                  restaurantAccesses:
                    type: array
                    items:
                      $ref: "#/components/schemas/RestaurantAccess"
  /api/restaurant-access/owner/{ownerId}:
    get:
      summary: Get restaurant access by owner ID
      parameters:
        - in: path
          name: ownerId
          required: true
          schema:
            type: string
      responses:
        200:
          description: List of restaurant access for owner (empty array if no access records found)
          content:
            application/json:
              schema:
                type: object
                properties:
                  restaurantAccesses:
                    type: array
                    items:
                      $ref: "#/components/schemas/RestaurantAccess"
  /api/restaurant-access/access/{accessId}/grant:
    patch:
      summary: Grant restaurant access
      parameters:
        - in: path
          name: accessId
          required: true
          schema:
            type: string
      responses:
        200:
          description: Access granted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Access granted successfully"
                  accessRecord:
                    $ref: "#/components/schemas/RestaurantAccess"
  /api/restaurant-access/access/{accessId}/suspend:
    patch:
      summary: Suspend restaurant access
      parameters:
        - in: path
          name: accessId
          required: true
          schema:
            type: string
      responses:
        200:
          description: Access suspended
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Access Suspended Successfully"
                  accessRecord:
                    $ref: "#/components/schemas/RestaurantAccess"
  /api/restaurant-access/access/{accessId}/delete:
    patch:
      summary: Delete restaurant access
      parameters:
        - in: path
          name: accessId
          required: true
          schema:
            type: string
      responses:
        200:
          description: Access deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Access deleted successfully"
                  accessRecord:
                    $ref: "#/components/schemas/RestaurantAccess"
  /api/restaurant-access/access/{accessId}/update:
    patch:
      summary: Update restaurant access status
      parameters:
        - in: path
          name: accessId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: ["pending", "approved", "suspended", "innactive"]
      responses:
        200:
          description: Access status updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Status updated successfully"
                  accessRecord:
                    $ref: "#/components/schemas/RestaurantAccess"
  /api/user-types:
    get:
      summary: Get all user types
      responses:
        200:
          description: List of user types
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserTypeInfo"

  /api/user-types/{userType}:
    get:
      summary: Get user type by name
      description: Retrieve a specific user type by its name
      parameters:
        - in: path
          name: userType
          required: true
          description: The name of the user type to retrieve
          schema:
            $ref: "#/components/schemas/UserType"
      responses:
        200:
          description: User type retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserTypeInfo"
        404:
          description: User type not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User Type not found"

  /api/allergens:
    get:
      summary: Get all allergens
      description: Retrieve all available allergens
      responses:
        200:
          description: List of allergens
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Allergen"
    post:
      summary: Create a new allergen
      description: Create a new allergen with the provided details
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Allergen"
      responses:
        201:
          description: Allergen created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Allergen"
        400:
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/allergens/{id}:
    get:
      summary: Get allergen by ID
      description: Retrieve a specific allergen by its ID
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the allergen to retrieve
          schema:
            type: string
      responses:
        200:
          description: Allergen retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Allergen"
        400:
          description: Allergen ID is required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        404:
          description: Allergen not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      summary: Update allergen
      description: Update an existing allergen
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the allergen to update
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Allergen"
      responses:
        200:
          description: Allergen updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Allergen"
        400:
          description: Invalid input (missing ID or body)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        404:
          description: Allergen not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      summary: Delete allergen
      description: Delete an allergen by its ID
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the allergen to delete
          schema:
            type: string
      responses:
        200:
          description: Allergen deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Allergen deleted successfully"
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        example: "507f1f77bcf86cd799439013"
        400:
          description: Allergen ID is required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        404:
          description: Allergen not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/courses:
    get:
      summary: Get all courses
      description: Retrieve all available courses
      responses:
        200:
          description: List of courses
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Course"
    post:
      summary: Create a new course
      description: Create a new course with the provided details
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Course"
      responses:
        201:
          description: Course created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Course"
        400:
          description: Invalid request body
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid request body"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal server error"

  /api/courses/{id}:
    get:
      summary: Get course by ID
      description: Retrieve a specific course by its ID
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the course to retrieve
          schema:
            type: string
      responses:
        200:
          description: Course retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Course"
        400:
          description: Course ID is required
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Course ID is required"
        404:
          description: Course not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Course not found"
    put:
      summary: Update course
      description: Update an existing course
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the course to update
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Course"
      responses:
        200:
          description: Course updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Course"
        400:
          description: Invalid input (missing ID or body)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Course ID is required"
        404:
          description: Course not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Course not found"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal server error"
    delete:
      summary: Delete course
      description: Delete a course by its ID
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the course to delete
          schema:
            type: string
      responses:
        200:
          description: Course deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Course deleted successfully"
        400:
          description: Course ID is required
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Course ID is required"
        404:
          description: Course not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Course not found"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal server error"

  /api/cuisines:
    get:
      summary: Get all cuisines
      description: Retrieve all available cuisines
      responses:
        200:
          description: List of cuisines
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Cuisine"
    post:
      summary: Create a new cuisine
      description: Create a new cuisine with the provided details
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Cuisine"
      responses:
        201:
          description: Cuisine created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cuisine"
        400:
          description: Invalid request body
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid request body"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal server error"

  /api/cuisines/{id}:
    get:
      summary: Get cuisine by ID
      description: Retrieve a specific cuisine by its ID
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the cuisine to retrieve
          schema:
            type: string
      responses:
        200:
          description: Cuisine retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cuisine"
        400:
          description: Cuisine ID is required
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "ID is required"
        404:
          description: Cuisine not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Cuisine type not found"
    put:
      summary: Update cuisine
      description: Update an existing cuisine
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the cuisine to update
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Cuisine"
      responses:
        200:
          description: Cuisine updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cuisine"
        400:
          description: Invalid input (missing ID or body)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Cuisine ID is required"
        404:
          description: Cuisine not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Cuisine type not found"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal server error"
    delete:
      summary: Delete cuisine
      description: Delete a cuisine by its ID
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the cuisine to delete
          schema:
            type: string
      responses:
        200:
          description: Cuisine deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Cuisine type deleted successfully"
        400:
          description: Cuisine ID is required
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "ID is required"
        404:
          description: Cuisine not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Cuisine type not found"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal server error"



  /api/media:
    post:
      summary: Create media record
      description: |
        Create a new media record in the backend database.
        This endpoint is typically called after media has been uploaded to the media service.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - url
                - type
              properties:
                url:
                  type: string
                  description: "URL of the uploaded media"
                  example: "https://example.com/image.jpg"
                type:
                  type: string
                  enum: ["image", "video", "audio"]
                  description: "Type of media"
                  example: "image"
                title:
                  type: string
                  description: "Title or caption for the media"
                  example: "Restaurant Interior"
                description:
                  type: string
                  description: "Description of the media content"
                  example: "Beautiful interior view of the restaurant"
                mimeType:
                  type: string
                  description: "MIME type of the media"
                  example: "image/jpeg"
                fileSize:
                  type: integer
                  description: "File size in bytes"
                  example: 1024000
                provider:
                  type: string
                  enum: ["cloudinary", "aws-s3"]
                  description: "Cloud storage provider"
                  example: "cloudinary"
                providerId:
                  type: string
                  description: "Provider-specific media ID"
                  example: "cloudinary_123"
                mediaServiceId:
                  type: string
                  description: "Media service database ID"
                  example: "media_service_456"
                variants:
                  type: array
                  items:
                    $ref: "#/components/schemas/MediaVariant"
                  description: "Media variants (different sizes/formats)"
                tags:
                  type: array
                  items:
                    type: string
                  description: "Tags for the media"
                  example: '["food", "restaurant"]'
                associatedWith:
                  type: object
                  properties:
                    type:
                      type: string
                      enum: ["post", "dish", "restaurant", "user"]
                      example: "restaurant"
                    id:
                      type: string
                      example: "507f1f77bcf86cd799439016"
      responses:
        201:
          description: Media created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Media"
        400:
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        401:
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/media/upload:
    post:
      summary: Upload media file (Hybrid Architecture)
      description: |
        Upload a media file using the hybrid architecture. 
        This endpoint delegates file processing to the media service while managing metadata in the main backend.
        Supports images and videos up to 100MB.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
                  description: "Media file to upload (image or video)"
                title:
                  type: string
                  description: "Title or caption for the media"
                  example: "Restaurant Interior"
                description:
                  type: string
                  description: "Description of the media content"
                  example: "Beautiful interior view of the restaurant"
                tags:
                  type: string
                  description: "JSON array of tags"
                  example: '["food", "restaurant", "interior"]'
                folder:
                  type: string
                  description: "Folder path for organizing media"
                  example: "restaurants/interior"
                associatedWith:
                  type: string
                  description: "JSON object with type and id"
                  example: '{"type": "post", "id": "507f1f77bcf86cd799439016"}'
      responses:
        201:
          description: Media uploaded successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Media"
        400:
          description: Invalid file or request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "File type not supported or file too large"
        401:
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        413:
          description: File too large
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "File size exceeds maximum limit of 104857600 bytes"
        500:
          description: Upload failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Media service upload failed"

  /api/media/{id}:
    get:
      summary: Get media by ID
      description: Retrieve a specific media item by its ID
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the media to retrieve
          schema:
            type: string
      responses:
        200:
          description: Media retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Media"
        404:
          description: Media not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      summary: Update media
      description: Update an existing media item
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the media to update
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: "Title or caption for the media"
                  example: "Updated Restaurant Interior"
                description:
                  type: string
                  description: "Description of the media content"
                  example: "Updated description of the restaurant interior"
                associatedWith:
                  type: object
                  properties:
                    type:
                      type: string
                      enum:
                        - "post"
                        - "dish"
                        - "restaurant"
                      description: "Type of content this media is associated with"
                      example: "post"
                    id:
                      type: string
                      description: "ID of the associated content"
                      example: "507f1f77bcf86cd799439016"
                  description: "Information about what this media is associated with"
      responses:
        200:
          description: Media updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Media"
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        401:
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        403:
          description: Not authorized to update this media
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        404:
          description: Media not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      summary: Delete media
      description: Delete a media item by its ID
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the media to delete
          schema:
            type: string
      responses:
        200:
          description: Media deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Media deleted successfully"
        401:
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        403:
          description: Not authorized to delete this media
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        404:
          description: Media not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/media/associated/{type}/{id}:
    get:
      summary: Get media by associated item
      description: Retrieve media items associated with a specific content type and ID
      parameters:
        - in: path
          name: type
          required: true
          description: Type of content (post, dish, restaurant)
          schema:
            type: string
            enum:
              - "post"
              - "dish"
              - "restaurant"
        - in: path
          name: id
          required: true
          description: ID of the associated content
          schema:
            type: string
      responses:
        200:
          description: Media items retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Media"
        400:
          description: Invalid type or missing ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/media/user/{userId}:
    get:
      summary: Get user's media
      description: Retrieve media items uploaded by a specific user with pagination
      parameters:
        - in: path
          name: userId
          required: true
          description: ID of the user
          schema:
            type: string
        - in: query
          name: page
          required: false
          description: Page number for pagination
          schema:
            type: integer
            default: 1
            minimum: 1
        - in: query
          name: limit
          required: false
          description: Number of items per page
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
      responses:
        200:
          description: User's media retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  media:
                    type: array
                    items:
                      $ref: "#/components/schemas/Media"
                  pagination:
                    type: object
                    properties:
                      currentPage:
                        type: integer
                        description: "Current page number"
                        example: 1
                      totalPages:
                        type: integer
                        description: "Total number of pages"
                        example: 5
                      totalMedia:
                        type: integer
                        description: "Total number of media items"
                        example: 50
                      hasNextPage:
                        type: boolean
                        description: "Whether there is a next page"
                        example: true
                      hasPrevPage:
                        type: boolean
                        description: "Whether there is a previous page"
                        example: false
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/media/{id}/verify:
    patch:
      summary: Verify media
      description: Mark media as verified by moderators
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        200:
          description: Media verified successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Media"
        400:
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        404:
          description: Media not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/media/verified:
    get:
      summary: Get verified media
      description: Retrieve verified media items with optional filtering and pagination
      parameters:
        - in: query
          name: page
          required: false
          description: Page number for pagination
          schema:
            type: integer
            default: 1
            minimum: 1
        - in: query
          name: limit
          required: false
          description: Number of items per page
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
        - in: query
          name: type
          required: false
          description: Filter by media type (post, dish)
          schema:
            type: string
            enum:
              - "post"
              - "dish"
      responses:
        200:
          description: Verified media retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  media:
                    type: array
                    items:
                      $ref: "#/components/schemas/Media"
                  pagination:
                    type: object
                    properties:
                      currentPage:
                        type: integer
                        description: "Current page number"
                        example: 1
                      totalPages:
                        type: integer
                        description: "Total number of pages"
                        example: 5
                      totalMedia:
                        type: integer
                        description: "Total number of media items"
                        example: 50
                      hasNextPage:
                        type: boolean
                        description: "Whether there is a next page"
                        example: true
                      hasPrevPage:
                        type: boolean
                        description: "Whether there is a previous page"
                        example: false
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/posts:
    post:
      summary: Create a new post
      description: Create a new food post with media, location, and optional food catalogue reference
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Post"
      responses:
        201:
          description: Post created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        400:
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        401:
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    get:
      summary: Get all posts
      description: Retrieve all posts with optional filtering
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number for pagination
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of posts per page
        - in: query
          name: cuisine
          schema:
            type: string
          description: Filter by cuisine type ID
        - in: query
          name: course
          schema:
            type: string
          description: Filter by course type ID
        - in: query
          name: visibility
          schema:
            type: string
            enum: ["public", "private", "followers"]
            default: "public"
          description: Filter by visibility setting
      responses:
        200:
          description: List of posts with pagination
          content:
            application/json:
              schema:
                type: object
                properties:
                  posts:
                    type: array
                    items:
                      $ref: "#/components/schemas/Post"
                  pagination:
                    type: object
                    properties:
                      currentPage:
                        type: integer
                      totalPages:
                        type: integer
                      totalPosts:
                        type: integer
                      hasNextPage:
                        type: boolean
                      hasPrevPage:
                        type: boolean

  /api/posts/{id}:
    get:
      summary: Get post by ID
      description: Retrieve a specific post by its ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        200:
          description: Post retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        404:
          description: Post not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      summary: Update post
      description: Update an existing post
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Post"
      responses:
        200:
          description: Post updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        400:
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        401:
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        403:
          description: Not authorized to update this post
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        404:
          description: Post not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      summary: Delete post
      description: Delete a post
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        204:
          description: Post deleted successfully
        401:
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        403:
          description: Not authorized to delete this post
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        404:
          description: Post not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/posts/user/{userId}:
    get:
      summary: Get posts by user
      description: Retrieve all posts created by a specific user
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number for pagination
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of posts per page
      responses:
        200:
          description: List of user posts with pagination
          content:
            application/json:
              schema:
                type: object
                properties:
                  posts:
                    type: array
                    items:
                      $ref: "#/components/schemas/Post"
                  pagination:
                    type: object
                    properties:
                      currentPage:
                        type: integer
                      totalPages:
                        type: integer
                      totalPosts:
                        type: integer
                      hasNextPage:
                        type: boolean
                      hasPrevPage:
                        type: boolean

  /api/posts/restaurant/{restaurantId}:
    get:
      summary: Get posts by restaurant
      description: Retrieve all posts associated with a specific restaurant
      parameters:
        - in: path
          name: restaurantId
          required: true
          schema:
            type: string
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number for pagination
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of posts per page
      responses:
        200:
          description: List of restaurant posts with pagination
          content:
            application/json:
              schema:
                type: object
                properties:
                  posts:
                    type: array
                    items:
                      $ref: "#/components/schemas/Post"
                  pagination:
                    type: object
                    properties:
                      currentPage:
                        type: integer
                      totalPages:
                        type: integer
                      totalPosts:
                        type: integer
                      hasNextPage:
                        type: boolean
                      hasPrevPage:
                        type: boolean

  /api/posts/food/{foodCatalogueId}:
    get:
      summary: Get posts by food catalogue item
      description: Retrieve all posts that reference a specific food catalogue item
      parameters:
        - in: path
          name: foodCatalogueId
          required: true
          schema:
            type: string
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number for pagination
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of posts per page
      responses:
        200:
          description: List of food posts with pagination
          content:
            application/json:
              schema:
                type: object
                properties:
                  posts:
                    type: array
                    items:
                      $ref: "#/components/schemas/Post"
                  pagination:
                    type: object
                    properties:
                      currentPage:
                        type: integer
                      totalPages:
                        type: integer
                      totalPosts:
                        type: integer
                      hasNextPage:
                        type: boolean
                      hasPrevPage:
                        type: boolean

  /api/posts/{id}/like:
    post:
      summary: Like or unlike a post
      description: Toggle like status for a post
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        200:
          description: Like status updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  post:
                    $ref: "#/components/schemas/Post"
                  liked:
                    type: boolean
                  likeCount:
                    type: integer
        401:
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        404:
          description: Post not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/posts/search:
    get:
      summary: Search posts
      description: Search posts by food name, caption, or tags
      parameters:
        - in: query
          name: q
          required: true
          schema:
            type: string
          description: Search query
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number for pagination
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of posts per page
      responses:
        200:
          description: Search results with pagination
          content:
            application/json:
              schema:
                type: object
                properties:
                  posts:
                    type: array
                    items:
                      $ref: "#/components/schemas/Post"
                  pagination:
                    type: object
                    properties:
                      currentPage:
                        type: integer
                      totalPages:
                        type: integer
                      totalPosts:
                        type: integer
                      hasNextPage:
                        type: boolean
                      hasPrevPage:
                        type: boolean
        400:
          description: Search query is required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/posts/{postId}/tag-food:
    post:
      summary: Tag food in post
      description: Add or update a food tag in a post with optional rating and review
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: postId
          required: true
          schema:
            type: string
          description: ID of the post to tag food in
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - foodCatalogueId
              properties:
                foodCatalogueId:
                  type: string
                  description: ID of the food catalogue item to tag
                  example: "507f1f77bcf86cd799439016"
                tagType:
                  type: string
                  enum: ["primary", "secondary", "mentioned", "reviewed"]
                  default: "primary"
                  description: Type of tag for this food item
                  example: "primary"
                rating:
                  type: number
                  minimum: 1
                  maximum: 5
                  description: Optional rating for this food item (1-5)
                  example: 5
                review:
                  type: string
                  maxLength: 200
                  description: Optional review text for this food item
                  example: "Delicious! The best pizza I've ever had."
      responses:
        200:
          description: Food tagged successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        400:
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        401:
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        403:
          description: Not authorized to modify this post
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        404:
          description: Post not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/posts/{postId}/tag-food/{foodCatalogueId}:
    delete:
      summary: Remove food tag from post
      description: Remove a food tag from a post
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: postId
          required: true
          schema:
            type: string
          description: ID of the post to remove tag from
        - in: path
          name: foodCatalogueId
          required: true
          schema:
            type: string
          description: ID of the food catalogue item to remove tag for
      responses:
        200:
          description: Food tag removed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        401:
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        403:
          description: Not authorized to modify this post
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        404:
          description: Post not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

# User Management API Endpoints
  /api/user-management:
    get:
      summary: Get restaurant users
      description: Retrieve users with access to a specific restaurant with pagination and filtering (Admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: restaurantId
          in: query
          description: Restaurant ID to filter users by (required for security)
          required: true
          schema:
            type: string
            example: "507f1f77bcf86cd799439011"
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
            example: 1
        - name: limit
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
            example: 20
        - name: search
          in: query
          description: Search by name, email, or username
          required: false
          schema:
            type: string
            example: "john"
        - name: userType
          in: query
          description: Filter by user type
          required: false
          schema:
            $ref: "#/components/schemas/UserType"
        - name: status
          in: query
          description: Filter by restaurant access status
          required: false
          schema:
            type: string
            enum: ["pending", "approved", "suspended", "innactive"]
            example: "approved"
      responses:
        200:
          description: Successfully retrieved users
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserListResponse"
        403:
          description: Access denied - Admin privileges required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/user-management/stats:
    get:
      summary: Get user statistics
      description: Retrieve user statistics and analytics (Admin only)
      security:
        - bearerAuth: []
      responses:
        200:
          description: Successfully retrieved user statistics
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserStats"
        403:
          description: Access denied - Admin privileges required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/user-management/{userId}:
    get:
      summary: Get user by ID
      description: Retrieve a specific user by ID (Admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          description: ID of the user to retrieve
          schema:
            type: string
            pattern: "^[0-9a-fA-F]{24}$"
            example: "507f1f77bcf86cd799439011"
      responses:
        200:
          description: Successfully retrieved user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDetailResponse"
        400:
          description: Invalid user ID format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        403:
          description: Access denied - Admin privileges required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      summary: Update user
      description: Update user information (Admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          description: ID of the user to update
          schema:
            type: string
            pattern: "^[0-9a-fA-F]{24}$"
            example: "507f1f77bcf86cd799439011"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdateRequest"
      responses:
        200:
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserUpdateResponse"
        400:
          description: Invalid request data or user ID format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        403:
          description: Access denied - Admin privileges required or cannot modify this user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      summary: Delete user
      description: Delete a user (Admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          description: ID of the user to delete
          schema:
            type: string
            pattern: "^[0-9a-fA-F]{24}$"
            example: "507f1f77bcf86cd799439011"
      responses:
        200:
          description: User deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDeleteResponse"
        400:
          description: Cannot delete own account or invalid user ID format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        403:
          description: Access denied - Admin privileges required or cannot delete this user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

# User Profile API Endpoints
  /api/user-profile/{userId}:
    get:
      summary: Get user profile
      description: Retrieve user's own profile
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          description: ID of the user (must match authenticated user)
          schema:
            type: string
            pattern: "^[0-9a-fA-F]{24}$"
            example: "507f1f77bcf86cd799439011"
      responses:
        200:
          description: Successfully retrieved user profile
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfileGetResponse"
        400:
          description: Invalid user ID format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        401:
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        403:
          description: Can only view own profile
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      summary: Update user profile
      description: Update user's own profile (non-sensitive fields only)
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          description: ID of the user (must match authenticated user)
          schema:
            type: string
            pattern: "^[0-9a-fA-F]{24}$"
            example: "507f1f77bcf86cd799439011"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserProfileUpdateRequest"
      responses:
        200:
          description: Profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Profile updated successfully"
                  user:
                    $ref: "#/components/schemas/User"
        400:
          description: Invalid request data, user ID format, or field conflicts
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        401:
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        403:
          description: Can only update own profile
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/user-profile/{userId}/password:
    patch:
      summary: Change password
      description: Change user's own password
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          description: ID of the user (must match authenticated user)
          schema:
            type: string
            pattern: "^[0-9a-fA-F]{24}$"
            example: "507f1f77bcf86cd799439011"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PasswordChangeRequest"
      responses:
        200:
          description: Password changed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PasswordChangeResponse"
        400:
          description: Invalid request data, user ID format, or password requirements not met
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        401:
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        403:
          description: Can only change own password
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

# Note: User Profile API Endpoints are defined earlier in the paths section


components:
  schemas:
    UserType:
      type: string
      enum: ["guest", "user", "admin", "moderator", "root"]
      description: "User type/role enumeration"
      example: "user"
    
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          description: A human-readable description of the error.
          example: An unexpected error has occured
        error:
          type: string
          description: Detailed error message.
          example: "Database connection failed"

    User:
      type: object
      properties:
        _id:
          type: string
          description: "Unique identifier for the user"
          example: "507f1f77bcf86cd799439011"
        username:
          type: string
          example: anthony_ukutegbe
        phone:
          type: string
          example: "+2347012345678"
        name:
          type: string
          example: Anthony Ukutegbe
        email:
          type: string
          format: email
          example: anthony@test.com
        hometown:
          type: string
          example: Lagos
        currentCity:
          type: string
          example: Abuja
        country:
          type: string
          example: Nigeria
        location:
          type: object
          properties:
            city:
              type: string
              example: "New York"
            country:
              type: string
              example: "USA"
            geo:
              type: object
              properties:
                type:
                  type: string
                  enum: ["Point"]
                  example: "Point"
                coordinates:
                  type: array
                  items:
                    type: number
                  example: [-74.006, 40.7128]
                  description: "[longitude, latitude]"
        imageUrl:
          type: string
          example: https://example.com/avatar.jpg
        address:
          type: string
          example: "123, Some Street, City"
        password:
          type: string
          format: password
          example: strongPassword123
        isVerified:
          type: boolean
          example: false
        userType:
          $ref: "#/components/schemas/UserType"
          description: "User type (platform-wide permissions)"
        bio:
          type: string
          maxLength: 200
          description: "User's bio/description"
          example: "Food enthusiast and restaurant owner"
        dietaryPreferences:
          type: array
          items:
            type: string
          description: "User's dietary preferences"
          example: ["vegetarian", "gluten-free"]
        notificationSettings:
          type: object
          properties:
            likes:
              type: boolean
              example: true
            follows:
              type: boolean
              example: true
            restaurantUpdates:
              type: boolean
              example: true
        lastLogin:
          type: string
          format: date-time
          description: "Last login timestamp"
          example: "2025-04-20T15:30:00Z"
        timezone:
          type: string
          description: "User's timezone"
          example: "UTC"
        twoFactorEnabled:
          type: boolean
          description: "Whether two-factor authentication is enabled"
          example: false
        theme:
          type: string
          enum: ["light", "dark", "system"]
          description: "User's preferred theme"
          example: "system"
        language:
          type: string
          description: "User's preferred language"
          example: "en"
        createdAt:
          type: string
          format: date-time
          example: "2025-04-20T15:30:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2025-04-20T15:30:00Z"
        # Restaurant-specific fields (added when returned via user-management API)
        status:
          type: string
          enum: ["pending", "approved", "suspended", "innactive"]
          description: "User's access status in the specific restaurant"
          example: "approved"
        accessId:
          type: string
          description: "Restaurant access record ID"
          example: "507f1f77bcf86cd799439012"
        restaurantAccess:
          type: integer
          description: "Number of restaurants user has access to (always 1 for restaurant-specific queries)"
          example: 1
        activeRestaurants:
          type: integer
          description: "Number of active restaurant accesses (0 or 1 for restaurant-specific queries)"
          example: 1
      required:
        - name
        - email
        - password
        - userType

    RestaurantAccess:
      type: object
      properties:
        _id:
          type: string
          description: "Unique identifier for the restaurant access record"
          example: "507f1f77bcf86cd799439011"
        userId:
          type: string
          description: "ID of the user"
          example: "507f1f77bcf86cd799439012"
        restaurantId:
          type: string
          description: "ID of the restaurant"
          example: "507f1f77bcf86cd799439013"
        status:
          type: string
          enum: ["pending", "approved", "suspended", "innactive"]
          description: "Status of the access request"
          example: "approved"
        createdAt:
          type: string
          format: date-time
          example: "2025-04-20T15:30:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2025-04-20T15:30:00Z"
      required:
        - userId
        - restaurantId
        - status

    UserListResponse:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: "#/components/schemas/User"
        pagination:
          type: object
          properties:
            currentPage:
              type: integer
              example: 1
            totalPages:
              type: integer
              example: 5
            totalUsers:
              type: integer
              example: 100
            hasNextPage:
              type: boolean
              example: true
            hasPrevPage:
              type: boolean
              example: false

    UserDetailResponse:
      type: object
      properties:
        user:
          $ref: "#/components/schemas/User"

    UserUpdateRequest:
      type: object
      properties:
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          format: email
          example: "john@example.com"
        username:
          type: string
          example: "johndoe"
        userType:
          $ref: "#/components/schemas/UserType"
        phone:
          type: string
          example: "+1234567890"
        bio:
          type: string
          example: "Food enthusiast and restaurant owner"
        dietaryPreferences:
          type: array
          items:
            type: string
          example: ["vegetarian", "gluten-free"]
        location:
          type: object
          properties:
            city:
              type: string
              example: "New York"
            country:
              type: string
              example: "USA"
        imageUrl:
          type: string
          example: "https://example.com/avatar.jpg"
        notificationSettings:
          type: object
          properties:
            likes:
              type: boolean
              example: true
            follows:
              type: boolean
              example: false
            restaurantUpdates:
              type: boolean
              example: true

    UserUpdateResponse:
      type: object
      properties:
        message:
          type: string
          example: "User updated successfully"
        user:
          $ref: "#/components/schemas/User"

    UserDeleteResponse:
      type: object
      properties:
        message:
          type: string
          example: "User deleted successfully"
        deletedUser:
          type: object
          properties:
            _id:
              type: string
              example: "507f1f77bcf86cd799439011"
            name:
              type: string
              example: "John Doe"
            email:
              type: string
              example: "john@example.com"

    UserStats:
      type: object
      properties:
        totalUsers:
          type: integer
          example: 1000
        newUsersThisMonth:
          type: integer
          example: 50
        userTypeBreakdown:
          type: array
          items:
            type: object
            properties:
              _id:
                $ref: "#/components/schemas/UserType"
              count:
                type: integer
        accessStatusBreakdown:
          type: array
          items:
            type: object
            properties:
              _id:
                type: string
                enum: ["pending", "approved", "suspended", "innactive"]
              count:
                type: integer

    PasswordChangeRequest:
      type: object
      required:
        - currentPassword
        - newPassword
      properties:
        currentPassword:
          type: string
          format: password
          example: "currentPassword123"
        newPassword:
          type: string
          format: password
          example: "newPassword123"

    PasswordChangeResponse:
      type: object
      properties:
        message:
          type: string
          example: "Password changed successfully"

    Restaurant:
      type: object
      properties:
        _id:
          type: string
          example: "507f1f77bcf86cd799439011"
        name:
          type: string
          example: "Pizza Palace"
        description:
          type: string
          example: "Best pizza in town"
        address:
          type: string
          example: "123 Main St"
        city:
          type: string
          example: "New York"
        state:
          type: string
          example: "NY"
        country:
          type: string
          example: "USA"
        phone:
          type: string
          example: "+1234567890"
        email:
          type: string
          example: "info@pizzapalace.com"
        website:
          type: string
          example: "https://pizzapalace.com"
        cuisine:
          type: array
          items:
            $ref: "#/components/schemas/Cuisine"
          description: "Restaurant cuisine types"
          example: [{"_id": "507f1f77bcf86cd799439011", "name": "Italian"}, {"_id": "507f1f77bcf86cd799439012", "name": "Mediterranean"}]
        priceRange:
          type: string
          enum: ["$", "$$", "$$$", "$$$$"]
          example: "$$"
        rating:
          type: number
          minimum: 0
          maximum: 5
          example: 4.5
        ownerId:
          type: string
          example: "507f1f77bcf86cd799439012"
        isActive:
          type: boolean
          example: true
        gallery:
          type: array
          items:
            $ref: "#/components/schemas/Media"
          description: "Array of media objects for the restaurant gallery"
        assignedImages:
          type: object
          description: "Assigned images for logo and profile"
          properties:
            logo:
              type: object
              properties:
                mediaId:
                  $ref: "#/components/schemas/Media"
                  description: "Assigned logo media"
                assignedAt:
                  type: string
                  format: date-time
                  description: "When the logo was assigned"
                  example: "2025-04-20T15:30:00Z"
                assignedBy:
                  $ref: "#/components/schemas/User"
                  description: "User who assigned the logo"
            profileImage:
              type: object
              properties:
                mediaId:
                  $ref: "#/components/schemas/Media"
                  description: "Assigned profile image media"
                assignedAt:
                  type: string
                  format: date-time
                  description: "When the profile image was assigned"
                  example: "2025-04-20T15:30:00Z"
                assignedBy:
                  $ref: "#/components/schemas/User"
                  description: "User who assigned the profile image"
        businessHours:
          type: array
          items:
            $ref: "#/components/schemas/BusinessHour"
          description: "Restaurant business hours"
        features:
          type: array
          items:
            $ref: "#/components/schemas/RestaurantFeature"
          description: "Restaurant features and amenities"
          example: ["Outdoor seating", "Delivery", "Takeout", "Wheelchair accessible"]
        meta:
          type: object
          description: "Additional metadata for the restaurant"
          additionalProperties: true
        owner:
          type: boolean
          description: "Whether the current user is the owner of this restaurant"
          example: false
        createdAt:
          type: string
          format: date-time
          example: "2025-04-20T15:30:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2025-04-20T15:30:00Z"



    DeliveryLink:
      type: object
      properties:
        _id:
          type: string
          example: "507f1f77bcf86cd799439011"
        name:
          type: string
          example: "Uber Eats"
        platform:
          type: string
          example: "Uber Eats"
        url:
          type: string
          example: "https://ubereats.com/restaurant"
        restaurantId:
          type: string
          example: "507f1f77bcf86cd799439012"
        isActive:
          type: boolean
          example: true
        createdAt:
          type: string
          format: date-time
          example: "2025-04-20T15:30:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2025-04-20T15:30:00Z"

    FoodCatalogue:
      type: object
      properties:
        _id:
          type: string
          example: "507f1f77bcf86cd799439011"
        name:
          type: string
          example: "Margherita Pizza"
        description:
          type: string
          example: "Classic tomato and mozzarella pizza"
        price:
          type: object
          properties:
            amount:
              type: number
              example: 15.99
            currency:
              type: string
              example: "USD"
        category:
          type: string
          example: "Pizza"
        allergens:
          type: array
          items:
            type: object
            properties:
              _id:
                type: string
                example: "507f1f77bcf86cd799439011"
              name:
                type: string
                example: "Gluten"
          example: [{"_id": "507f1f77bcf86cd799439011", "name": "Gluten"}, {"_id": "507f1f77bcf86cd799439012", "name": "Dairy"}]
        courses:
          type: array
          items:
            type: string
          example: ["main"]
        cuisines:
          type: array
          items:
            type: string
          example: ["Italian"]
        cuisineType:
          type: object
          properties:
            _id:
              type: string
              example: "507f1f77bcf86cd799439011"
            name:
              type: string
              example: "Italian"
            description:
              type: string
              example: "Traditional Italian cuisine"
        course:
          type: object
          properties:
            _id:
              type: string
              example: "507f1f77bcf86cd799439011"
            name:
              type: string
              example: "Main Course"
            description:
              type: string
              example: "Primary dish of the meal"
        ingredients:
          type: array
          items:
            type: string
          example: ["tomato", "mozzarella", "basil"]
        restaurant:
          type: string
          description: "Restaurant ID"
          example: "507f1f77bcf86cd799439012"
        restaurantId:
          type: string
          example: "507f1f77bcf86cd799439012"
        isAvailable:
          type: boolean
          example: true
        isFeatured:
          type: boolean
          description: "Whether this food item is featured/promoted"
          example: false
        imageUrl:
          type: string
          example: "https://example.com/pizza.jpg"
        images:
          type: array
          items:
            type: string
          description: "Array of media IDs associated with this food item"
          example: ["507f1f77bcf86cd799439011", "507f1f77bcf86cd799439012"]
        createdAt:
          type: string
          format: date-time
          example: "2025-04-20T15:30:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2025-04-20T15:30:00Z"

    Allergen:
      type: object
      properties:
        _id:
          type: string
          example: "507f1f77bcf86cd799439011"
        name:
          type: string
          example: "Gluten"
        description:
          type: string
          example: "Contains gluten"
        icon:
          type: string
          example: "🌾"
        createdAt:
          type: string
          format: date-time
          example: "2025-04-20T15:30:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2025-04-20T15:30:00Z"

    Course:
      type: object
      properties:
        _id:
          type: string
          example: "507f1f77bcf86cd799439011"
        name:
          type: string
          example: "Main Course"
        description:
          type: string
          example: "Primary dish of the meal"
        icon:
          type: string
          example: "🍽️"
        createdAt:
          type: string
          format: date-time
          example: "2025-04-20T15:30:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2025-04-20T15:30:00Z"

    Cuisine:
      type: object
      properties:
        _id:
          type: string
          example: "507f1f77bcf86cd799439011"
        name:
          type: string
          example: "Italian"
        description:
          type: string
          example: "Italian cuisine"
        icon:
          type: string
          example: "🍝"
        createdAt:
          type: string
          format: date-time
          example: "2025-04-20T15:30:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2025-04-20T15:30:00Z"

    MediaVariant:
      type: object
      properties:
        size:
          type: string
          example: "original"
        url:
          type: string
          example: "https://example.com/variant.jpg"
        width:
          type: integer
          example: 1920
        height:
          type: integer
          example: 1080
        fileSize:
          type: integer
          example: 1024000
        format:
          type: string
          example: "jpeg"
        createdAt:
          type: string
          format: date-time
          example: "2025-04-20T15:30:00Z"

    Media:
      type: object
      properties:
        _id:
          type: string
          example: "507f1f77bcf86cd799439011"
        url:
          type: string
          example: "https://example.com/image.jpg"
        type:
          type: string
          enum: ["image", "video", "audio"]
          example: "image"
        title:
          type: string
          example: "Pizza Image"
        description:
          type: string
          example: "Delicious pizza"
        uploadedBy:
          type: object
          properties:
            id:
              type: string
              example: "507f1f77bcf86cd799439012"
            name:
              type: string
              example: "John Doe"
            username:
              type: string
              example: "johndoe"
            imageUrl:
              type: string
              example: "https://example.com/avatar.jpg"
        associatedWith:
          type: object
          properties:
            type:
              type: string
              enum: ["post", "dish", "restaurant", "user"]
              example: "restaurant"
            id:
              type: string
              example: "507f1f77bcf86cd799439012"
        verified:
          type: boolean
          example: false
        fileSize:
          type: integer
          example: 1024000
        mimeType:
          type: string
          example: "image/jpeg"
        dimensions:
          type: object
          properties:
            width:
              type: integer
              example: 1920
            height:
              type: integer
              example: 1080
        providerId:
          type: string
          example: "cloudinary_123"
        mediaServiceId:
          type: string
          example: "media_service_456"
        provider:
          type: string
          enum: ["cloudinary", "aws-s3"]
          example: "cloudinary"
        variants:
          type: array
          items:
            type: object
            properties:
              size:
                type: string
                example: "original"
              url:
                type: string
                example: "https://example.com/variant.jpg"
              width:
                type: integer
                example: 1920
              height:
                type: integer
                example: 1080
              bitrate:
                type: string
                example: "1000k"
              resolution:
                type: string
                example: "1920x1080"
              fileSize:
                type: integer
                example: 1024000
              format:
                type: string
                example: "jpeg"
              createdAt:
                type: string
                format: date-time
                example: "2025-04-20T15:30:00Z"
        tags:
          type: array
          items:
            type: string
          example: ["pizza", "food"]
        createdAt:
          type: string
          format: date-time
          example: "2025-04-20T15:30:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2025-04-20T15:30:00Z"



    Notification:
      type: object
      properties:
        _id:
          type: string
          example: "507f1f77bcf86cd799439011"
        userId:
          type: string
          example: "507f1f77bcf86cd799439012"
        title:
          type: string
          example: "New Order"
        message:
          type: string
          example: "You have a new order"
        type:
          type: string
          enum: ["order", "system", "promotion", "access_request", "access_granted", "access_denied", "access_suspended", "restaurant_update"]
          example: "order"
        isRead:
          type: boolean
          example: false
        metadata:
          type: object
          additionalProperties: true
          description: "Additional notification metadata"
          example: {}
        createdAt:
          type: string
          format: date-time
          example: "2025-04-20T15:30:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2025-04-20T15:30:00Z"

    UserTypeInfo:
      type: object
      properties:
        _id:
          type: string
          example: "507f1f77bcf86cd799439011"
        name:
          type: string
          example: "Admin"
        description:
          type: string
          example: "Administrator user"
        permissions:
          type: array
          items:
            type: string
          example: ["read", "write", "delete"]
        createdAt:
          type: string
          format: date-time
          example: "2025-04-20T15:30:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2025-04-20T15:30:00Z"

    Post:
      type: object
      properties:
        _id:
          type: string
          example: "507f1f77bcf86cd799439011"
        title:
          type: string
          example: "Amazing Pizza"
        content:
          type: string
          example: "This pizza is incredible!"
        authorId:
          type: string
          example: "507f1f77bcf86cd799439012"
        restaurantId:
          type: string
          example: "507f1f77bcf86cd799439013"
        likes:
          type: integer
          example: 42
        tags:
          type: array
          items:
            type: string
          example: ["pizza", "delicious"]
        isPublished:
          type: boolean
          example: true
        createdAt:
          type: string
          format: date-time
          example: "2025-04-20T15:30:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2025-04-20T15:30:00Z"

    Price:
      type: object
      properties:
        amount:
          type: number
          example: 15.99
        currency:
          type: string
          example: "USD"

    Currency:
      type: object
      properties:
        code:
          type: string
          example: "USD"
        name:
          type: string
          example: "US Dollar"
        symbol:
          type: string
          example: "$"

    BusinessHour:
      type: object
      properties:
        day:
          type: string
          enum: ["monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday"]
          example: "monday"
        open:
          type: string
          example: "09:00"
        close:
          type: string
          example: "22:00"
        isClosed:
          type: boolean
          example: false

    RestaurantFeature:
      type: string
      enum: [
        "Outdoor seating", "Indoor dining", "Private dining rooms", "Bar seating", "Counter seating", "Rooftop dining",
        "Garden dining", "Waterfront dining", "Street-side dining", "Patio dining",
        "Take-out", "Delivery", "Drive-through", "Curbside pickup", "Catering",
        "Private events", "Corporate events", "Wedding catering", "Party catering", "Food trucks",
        "Free WiFi", "Mobile ordering", "Online reservations", "Contactless payment",
        "Digital menus", "QR code menus", "Self-service kiosks", "Table service", "Counter service", "Buffet service",
        "Wheelchair accessible", "Accessible parking", "Accessible restrooms", "Braille menus",
        "Service animal friendly", "Elevator access", "Ramp access",
        "Live music", "Sports on TV", "Background music", "Dance floor", "Karaoke",
        "Trivia nights", "Comedy nights", "Wine tastings", "Cooking classes", "Chef's table",
        "Free parking", "Valet parking", "Street parking", "Parking garage", "Bike parking",
        "Near public transit", "Uber/Lyft friendly",
        "Kid-friendly", "High chairs", "Kids menu", "Play area", "Changing tables",
        "Family restrooms", "Birthday parties",
        "Vegetarian options", "Vegan options", "Gluten-free options", "Halal options",
        "Kosher options", "Dairy-free options", "Nut-free options", "Low-sodium options",
        "Organic ingredients", "Local ingredients",
        "Full bar", "Wine list", "Craft beer", "Cocktails", "Happy hour", "BYOB",
        "Coffee service", "Tea service", "Juice bar", "Smoothies",
        "Gift cards", "Loyalty program", "Rewards program", "Group discounts",
        "Student discounts", "Senior discounts", "Military discounts", "Corporate accounts",
        "Catering delivery", "Event planning",
        "Contactless delivery", "Sanitized surfaces", "Staff wearing masks",
        "Temperature checks", "Social distancing", "Air purification", "UV sanitization",
        "Health inspections", "Food safety certified", "Allergen information",
        "Credit cards accepted", "Cash only", "Digital payments", "Split bills",
        "Gratuity included", "Tipping accepted", "Corporate billing", "Invoice available",
        "24/7 service", "Late night dining", "Breakfast service", "Lunch service",
        "Dinner service", "Brunch service", "Holiday hours", "Seasonal hours",
        "Reservations required", "Walk-ins welcome",
        "Romantic dining", "Anniversary specials", "Birthday celebrations",
        "Date night", "Business meetings", "Networking events", "Graduation parties",
        "Holiday parties", "Corporate lunches", "Team building"
      ]
      example: "Outdoor seating"

    UserProfileGetResponse:
      type: object
      properties:
        user:
          $ref: "#/components/schemas/User"

    UserProfileUpdateRequest:
      type: object
      properties:
        name:
          type: string
          example: "John Doe"
        username:
          type: string
          example: "johndoe"
        phone:
          type: string
          example: "+1234567890"
        bio:
          type: string
          example: "Food enthusiast and restaurant reviewer"
        dietaryPreferences:
          type: array
          items:
            type: string
          example: ["vegan", "gluten-free"]
        location:
          type: object
          properties:
            city:
              type: string
              example: "New York"
            country:
              type: string
              example: "USA"
        imageUrl:
          type: string
          example: "https://example.com/avatar.jpg"
        notificationSettings:
          type: object
          properties:
            likes:
              type: boolean
              example: true
            follows:
              type: boolean
              example: true
            restaurantUpdates:
              type: boolean
              example: false

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "JWT token for authentication"
