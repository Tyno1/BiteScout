/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Register a new user
         * @description Register a new user with the provided details
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @example Anthony */
                        firstName: string;
                        /** @example Ukutegbe */
                        lastName: string;
                        /**
                         * Format: email
                         * @example anthony@test.com
                         */
                        email: string;
                        /**
                         * Format: password
                         * @example strongPassword123
                         */
                        password: string;
                    };
                };
            };
            responses: {
                /** @description Successfully registered user */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Registration successful */
                            message?: string;
                            user?: {
                                /** @example Anthony Ukutegbe */
                                name?: string;
                                /**
                                 * Format: email
                                 * @example anthony@test.com
                                 */
                                email?: string;
                                userType?: {
                                    /** @example user */
                                    name?: string;
                                    /** @example 1 */
                                    level?: number;
                                    /** @example an ordinary user with restaurnat access */
                                    description?: string;
                                };
                            };
                        };
                    };
                };
                /** @description Missing required field or invalid user type */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Missing required field or user type not found */
                            message?: string;
                        };
                    };
                };
                /** @description Conflict â€“ User already exists */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example User already exists */
                            message?: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * Format: email
                         * @example anthony@test.com
                         */
                        email: string;
                        /**
                         * Format: password
                         * @example strongPassword123
                         */
                        password: string;
                    };
                };
            };
            responses: {
                /** @description Login Successfull */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Login successful */
                            message?: string;
                            user?: components["schemas"]["User"];
                            /** @example -access token here- */
                            accessToken?: string;
                            /** @example -refresh token here- */
                            refreshToken?: string;
                            /**
                             * Format: int64
                             * @description Expiration time as a Unix timestamp in milliseconds
                             * @example 1713649200000
                             */
                            expiresIn?: number;
                        };
                    };
                };
                /** @description Missing required field or invalid credentials */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Missing required fields */
                            message?: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @example -refresh token here- */
                        refreshToken: string;
                    };
                };
            };
            responses: {
                /** @description Token refresh successful */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Refresh Token Successfull */
                            message?: string;
                            /** @example -new access token here- */
                            accessToken?: string;
                            /** @example -new refresh token here- */
                            refreshToken?: string;
                            /**
                             * Format: int64
                             * @description Expiration time as a Unix timestamp in milliseconds
                             * @example 1713649200000
                             */
                            expiresIn?: number;
                        };
                    };
                };
                /** @description Refresh token not found or Invalid Token */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Refresh token not found */
                            message?: string;
                        };
                    };
                };
                /** @description Internal Server error */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Invalid Refresh Token Request */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the user to update */
                    userId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            responses: {
                /** @description User updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["User"];
                    };
                };
                /** @description Invalid input */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description User not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/restaurants": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all restaurants */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of restaurants */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        /** Create a new restaurant */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Restaurant"];
                };
            };
            responses: {
                /** @description Restaurant created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/restaurants/owner/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get restaurant by owner ID */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Restaurant for owner */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/restaurants/owner-restaurants/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all restaurants for an owner */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of restaurants for owner */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/restaurants/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Search restaurants by name */
        get: {
            parameters: {
                query?: {
                    name?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of matching restaurants */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/restaurants/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get restaurant by ID */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Restaurant details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        /** Update restaurant */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Restaurant"];
                };
            };
            responses: {
                /** @description Restaurant updated */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        /** Delete restaurant */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Restaurant deleted */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/food-catalogue/restaurant/{restaurantId}/catalogue/{foodId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get food catalogue item by ID */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    restaurantId: string;
                    foodId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Food catalogue item */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        /** Update food catalogue item */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    restaurantId: string;
                    foodId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["FoodCatalogue"];
                };
            };
            responses: {
                /** @description Food catalogue item updated */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        /** Delete food catalogue item */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    restaurantId: string;
                    foodId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Food catalogue item deleted */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/food-catalogue/restaurant/{restaurantId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all food catalogue items for a restaurant */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    restaurantId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of food catalogue items */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/food-catalogue": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a new food catalogue item */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["FoodCatalogue"];
                };
            };
            responses: {
                /** @description Food catalogue item created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/notifications/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get notifications for a user */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of notifications */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/notifications/{userId}/{notificationId}/read": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Mark a notification as read */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: string;
                    notificationId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Notification marked as read */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        trace?: never;
    };
    "/api/notifications/{userId}/read-all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Mark all notifications as read */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description All notifications marked as read */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        trace?: never;
    };
    "/api/restaurant-access/{restaurantId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Request access to a restaurant */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    restaurantId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        userId?: string;
                    };
                };
            };
            responses: {
                /** @description Access request created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/restaurant-access/user/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get restaurant access by user ID */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of restaurant access for user */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/restaurant-access/owner/{ownerId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get restaurant access by owner ID */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    ownerId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of restaurant access for owner */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/restaurant-access/access/{accessId}/grant": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Grant restaurant access */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    accessId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Access granted */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        trace?: never;
    };
    "/api/restaurant-access/access/{accessId}/suspend": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Suspend restaurant access */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    accessId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Access suspended */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        trace?: never;
    };
    "/api/restaurant-access/access/{accessId}/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Delete restaurant access */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    accessId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Access deleted */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        trace?: never;
    };
    "/api/restaurant-access/access/{accessId}/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update restaurant access role */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    accessId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        role?: string;
                    };
                };
            };
            responses: {
                /** @description Access role updated */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        ErrorResponse: {
            /**
             * @description A human-readable description of the error.
             * @example An unexpected error has occured
             */
            message?: string;
            /**
             * @description Detailed error message.
             * @example Database connection failed
             */
            error?: string;
        };
        User: {
            /** @example anthony_ukutegbe */
            username?: string;
            /** @example +2347012345678 */
            phone?: string;
            /** @example Anthony Ukutegbe */
            name: string;
            /**
             * Format: email
             * @example anthony@test.com
             */
            email: string;
            /** @example Lagos */
            hometown?: string;
            /** @example Abuja */
            currentCity?: string;
            /** @example Nigeria */
            country?: string;
            /** @example https://example.com/avatar.jpg */
            imageUrl?: string;
            /** @example 123, Some Street, City */
            address?: string;
            /**
             * Format: password
             * @example strongPassword123
             */
            password: string;
            /** @example false */
            isVerified?: boolean;
            /** @example userTypeId */
            userType: string;
            /**
             * Format: date-time
             * @example 2025-04-20T15:30:00Z
             */
            createdAt?: string;
            /**
             * Format: date-time
             * @example 2025-04-20T15:30:00Z
             */
            updatedAt?: string;
        };
        Allergen: {
            /** @example egg */
            name?: string;
            /** @example allergic reaction to eggs and food that has egg content */
            description?: string;
        };
        Course: {
            /** @example main */
            name?: string;
            /** @example Main course in a meal */
            description?: string;
        };
        Cuisine: {
            /** @example Nigerian */
            name?: string;
            /** @example A Type of meal based on region of origin */
            description?: string;
        };
        BusinessHour: {
            /** @enum {string} */
            day?: "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday" | "Sunday";
            /** @description Opening time in HH:mm format */
            open?: string;
            /** @description Closing time in HH:mm format */
            close?: string;
            /**
             * @description Indicates if the restaurant is closed on this day
             * @default false
             */
            closed: boolean;
        };
        Restaurant: {
            /** @description Unique identifier for the restaurant owner */
            ownerId: string;
            /** @description Name of the restaurant */
            name: string;
            /**
             * Format: uri
             * @description URL to the restaurant's logo image
             */
            logo?: string;
            /** @description Brief description of the restaurant */
            description?: string;
            /** @description List of cuisines offered by the restaurant */
            cuisine?: string[];
            /**
             * @description Price range of the restaurant
             * @enum {string}
             */
            priceRange?: "$" | "$$" | "$$$" | "$$$$";
            /** @description Physical address of the restaurant */
            address?: string;
            /** @description Contact phone number */
            phone?: string;
            /**
             * Format: email
             * @description Contact email address
             */
            email?: string;
            /**
             * Format: uri
             * @description Website URL of the restaurant
             */
            website?: string;
            /** @description Operating hours for each day of the week */
            businessHours?: components["schemas"]["BusinessHour"][];
            /** @description List of features available at the restaurant */
            features?: ("Outdoor seating" | "Dining area" | "Take-out" | "Delivery" | "Catering" | "Wifi" | "Parking")[];
            /** @description URLs to images in the restaurant's gallery */
            gallery?: string[];
            /** @description Additional metadata associated with the restaurant */
            meta?: {
                [key: string]: unknown;
            };
        };
        Price: {
            /**
             * @description The price amount
             * @example 25.99
             */
            amount: number;
            /**
             * @description Currency type
             * @example USD
             * @enum {string}
             */
            currency: "USD" | "EUR" | "GBP" | "CAD" | "AUD" | "JPY" | "CNY" | "KRW" | "MYR" | "TWD" | "VND" | "THB" | "ZAR";
        };
        FoodCatalogue: {
            /**
             * @description The name of the food item
             * @example Spaghetti Bolognese
             */
            name: string;
            /**
             * @description List of ingredients used in the food item
             * @example [
             *       "Spaghetti",
             *       "Ground beef",
             *       "Tomato sauce"
             *     ]
             */
            ingredients: string[];
            /**
             * @description Cuisine type the food belongs to
             * @example Italian
             */
            cuisineType: string;
            /**
             * @description List of allergens associated with the food
             * @example [
             *       "Gluten",
             *       "Dairy"
             *     ]
             */
            allergens?: string[];
            /**
             * @description Course type the food belongs to (e.g., starter, main)
             * @example Main course
             */
            course: string;
            /** @description Price details for the food item */
            price: components["schemas"]["Price"];
            /**
             * @description List of image URLs for the food item
             * @example [
             *       "https://example.com/images/spaghetti-bolognese-1.jpg",
             *       "https://example.com/images/spaghetti-bolognese-2.jpg"
             *     ]
             */
            images: string[];
            /**
             * @description ID of the restaurant offering the food item
             * @example restaurant12345
             */
            restaurant: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
