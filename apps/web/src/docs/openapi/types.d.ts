/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Register a new user
         * @description Register a new user with the provided details
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @example Anthony */
                        firstName: string;
                        /** @example Ukutegbe */
                        lastName: string;
                        /**
                         * Format: email
                         * @example anthony@test.com
                         */
                        email: string;
                        /**
                         * Format: password
                         * @example strongPassword123
                         */
                        password: string;
                    };
                };
            };
            responses: {
                /** @description Successfully registered user */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Registration successful */
                            message?: string;
                            user?: {
                                /** @example Anthony Ukutegbe */
                                name?: string;
                                /**
                                 * Format: email
                                 * @example anthony@test.com
                                 */
                                email?: string;
                                userType?: {
                                    /** @example user */
                                    name?: string;
                                    /** @example 1 */
                                    level?: number;
                                    /** @example an ordinary user with restaurnat access */
                                    description?: string;
                                };
                            };
                        };
                    };
                };
                /** @description Missing required field or invalid user type */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Missing required field or user type not found */
                            message?: string;
                        };
                    };
                };
                /** @description Conflict – User already exists */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example User already exists */
                            message?: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * Format: email
                         * @example anthony@test.com
                         */
                        email: string;
                        /**
                         * Format: password
                         * @example strongPassword123
                         */
                        password: string;
                    };
                };
            };
            responses: {
                /** @description Login Successfull */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Login successful */
                            message?: string;
                            user?: components["schemas"]["User"];
                            /** @example -access token here- */
                            accessToken?: string;
                            /** @example -refresh token here- */
                            refreshToken?: string;
                            /**
                             * Format: int64
                             * @description Expiration time as a Unix timestamp in milliseconds
                             * @example 1713649200000
                             */
                            expiresIn?: number;
                        };
                    };
                };
                /** @description Missing required field or invalid credentials */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @example -refresh token here- */
                        refreshToken: string;
                    };
                };
            };
            responses: {
                /** @description Token refresh successful */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Refresh Token Successfull */
                            message?: string;
                            /** @example -new access token here- */
                            accessToken?: string;
                            /** @example -new refresh token here- */
                            refreshToken?: string;
                            /**
                             * Format: int64
                             * @description Expiration time as a Unix timestamp in milliseconds
                             * @example 1713649200000
                             */
                            expiresIn?: number;
                        };
                    };
                };
                /** @description Refresh token not found or Invalid Token */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Internal Server error */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the user to update */
                    userId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            responses: {
                /** @description User updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["User"];
                    };
                };
                /** @description Invalid input */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description User not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/restaurants": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all restaurants */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of restaurants */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Restaurant"][];
                    };
                };
            };
        };
        put?: never;
        /** Create a new restaurant */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Restaurant"];
                };
            };
            responses: {
                /** @description Restaurant created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Restaurant"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/restaurants/owner/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get restaurant by owner ID */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Restaurant for owner */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Restaurant"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/restaurants/owner-restaurants/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all restaurants for an owner */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of restaurants for owner */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Restaurant"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/restaurants/search/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Search restaurants by name */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Restaurant name to search for */
                    name: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of matching restaurants */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Restaurant"][];
                    };
                };
                /** @description Restaurant name is required */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/restaurants/filter": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Filter restaurants by various criteria including feature categories */
        get: {
            parameters: {
                query?: {
                    /** @description Restaurant name to search for */
                    name?: string;
                    /** @description Cuisine type to filter by */
                    cuisine?: string;
                    /** @description Price range to filter by */
                    priceRange?: "$" | "$$" | "$$$" | "$$$$";
                    /** @description Comma-separated list of specific features to filter by */
                    features?: string;
                    /** @description Comma-separated list of feature categories to filter by */
                    featureCategories?: string;
                    /** @description Page number for pagination */
                    page?: number;
                    /** @description Number of results per page */
                    limit?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of filtered restaurants */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            restaurants?: components["schemas"]["Restaurant"][];
                            pagination?: {
                                /** @example 1 */
                                currentPage?: number;
                                /** @example 5 */
                                totalPages?: number;
                                /** @example 50 */
                                totalRestaurants?: number;
                                /** @example true */
                                hasNextPage?: boolean;
                                /** @example false */
                                hasPrevPage?: boolean;
                            };
                            filters?: {
                                /** @description Currently applied filters */
                                applied?: Record<string, never>;
                                /** @description Available filter options */
                                available?: Record<string, never>;
                            };
                        };
                    };
                };
                /** @description Invalid filter parameters */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/restaurants/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get restaurant by ID */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Restaurant details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Restaurant"];
                    };
                };
            };
        };
        /** Update restaurant */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Restaurant"];
                };
            };
            responses: {
                /** @description Restaurant updated */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Restaurant"];
                    };
                };
            };
        };
        post?: never;
        /** Delete restaurant */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Restaurant deleted */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/restaurants/{id}/delivery-links": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get delivery links for a restaurant */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Restaurant ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of delivery links */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["DeliveryLink"][];
                    };
                };
                /** @description Restaurant not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        /** Add a delivery link to a restaurant */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Restaurant ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * @description Display name for the delivery link
                         * @example Uber Eats
                         */
                        name: string;
                        /**
                         * Format: uri
                         * @description URL to the delivery service
                         * @example https://ubereats.com/restaurant/123
                         */
                        url: string;
                        /**
                         * @description Delivery platform name
                         * @example Uber Eats
                         * @enum {string}
                         */
                        platform: "Uber Eats" | "DoorDash" | "Grubhub" | "Postmates" | "Instacart" | "Amazon Fresh" | "Walmart Grocery" | "Shipt" | "Custom" | "Other";
                        /**
                         * @description Whether this delivery link is active
                         * @default true
                         */
                        isActive?: boolean;
                    };
                };
            };
            responses: {
                /** @description Delivery link created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["DeliveryLink"];
                    };
                };
                /** @description Invalid input */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Restaurant not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/restaurants/{id}/delivery-links/{linkId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update a delivery link */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Restaurant ID */
                    id: string;
                    /** @description Delivery link ID */
                    linkId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description Display name for the delivery link */
                        name?: string;
                        /**
                         * Format: uri
                         * @description URL to the delivery service
                         */
                        url?: string;
                        /**
                         * @description Delivery platform name
                         * @enum {string}
                         */
                        platform?: "Uber Eats" | "DoorDash" | "Grubhub" | "Postmates" | "Instacart" | "Amazon Fresh" | "Walmart Grocery" | "Shipt" | "Custom" | "Other";
                        /** @description Whether this delivery link is active */
                        isActive?: boolean;
                    };
                };
            };
            responses: {
                /** @description Delivery link updated */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["DeliveryLink"];
                    };
                };
                /** @description Invalid input */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Restaurant or delivery link not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        post?: never;
        /** Delete a delivery link */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Restaurant ID */
                    id: string;
                    /** @description Delivery link ID */
                    linkId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Delivery link deleted */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Restaurant or delivery link not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/food-catalogue/restaurant/{restaurantId}/catalogue/{foodId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get food catalogue item by ID */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    restaurantId: string;
                    foodId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Food catalogue item */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["FoodCatalogue"];
                    };
                };
            };
        };
        /** Update food catalogue item */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    restaurantId: string;
                    foodId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["FoodCatalogue"];
                };
            };
            responses: {
                /** @description Food catalogue item updated */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["FoodCatalogue"];
                    };
                };
            };
        };
        post?: never;
        /** Delete food catalogue item */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    restaurantId: string;
                    foodId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Food catalogue item deleted */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/food-catalogue/restaurant/{restaurantId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all food catalogue items for a restaurant */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    restaurantId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of food catalogue items (empty array if no items found) */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["FoodCatalogue"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/food-catalogue": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a new food catalogue item */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["FoodCatalogue"];
                };
            };
            responses: {
                /** @description Food catalogue item created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["FoodCatalogue"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/food-catalogue/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search food items across all restaurants
         * @description Search for food items by name, ingredients, cuisine, price range, and other criteria across all restaurants
         */
        get: {
            parameters: {
                query?: {
                    /** @description Search query for food name, ingredients, or keywords */
                    q?: string;
                    /** @description Filter by cuisine type */
                    cuisine?: string;
                    /** @description Filter by course type (starter, main, dessert, etc.) */
                    course?: string;
                    /** @description Filter by price range */
                    priceRange?: "$" | "$$" | "$$$" | "$$$$";
                    /** @description Comma-separated list of allergens to exclude */
                    allergens?: string;
                    /** @description Filter by availability status */
                    isAvailable?: boolean;
                    /** @description Filter by featured status */
                    isFeatured?: boolean;
                    /** @description Sort results by field */
                    sortBy?: "name" | "price" | "popularity" | "rating" | "trending";
                    /** @description Sort order */
                    sortOrder?: "asc" | "desc";
                    /** @description Page number for pagination */
                    page?: number;
                    /** @description Number of results per page */
                    limit?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Search results with pagination */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description List of food items matching the search criteria */
                            foods?: components["schemas"]["FoodCatalogue"][];
                            /** @description List of restaurants offering the found foods */
                            restaurants?: components["schemas"]["Restaurant"][];
                            pagination?: {
                                /**
                                 * @description Current page number
                                 * @example 1
                                 */
                                currentPage?: number;
                                /**
                                 * @description Total number of pages
                                 * @example 5
                                 */
                                totalPages?: number;
                                /**
                                 * @description Total number of food items found
                                 * @example 95
                                 */
                                totalFoods?: number;
                                /**
                                 * @description Whether there are more pages
                                 * @example true
                                 */
                                hasNextPage?: boolean;
                                /**
                                 * @description Whether there are previous pages
                                 * @example false
                                 */
                                hasPrevPage?: boolean;
                            };
                            filters?: {
                                /**
                                 * @description Currently applied filters
                                 * @example {
                                 *       "q": "pizza",
                                 *       "cuisine": "Italian",
                                 *       "priceRange": "$$"
                                 *     }
                                 */
                                applied?: Record<string, never>;
                                /**
                                 * @description Available filter options for current results
                                 * @example {
                                 *       "cuisines": [
                                 *         "Italian",
                                 *         "American",
                                 *         "Mexican"
                                 *       ],
                                 *       "courses": [
                                 *         "main",
                                 *         "starter",
                                 *         "dessert"
                                 *       ],
                                 *       "priceRanges": [
                                 *         "$",
                                 *         "$$",
                                 *         "$$$"
                                 *       ]
                                 *     }
                                 */
                                available?: Record<string, never>;
                            };
                        };
                    };
                };
                /** @description Invalid search parameters */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/notifications/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get notifications for a user */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of notifications */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Notification"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/notifications/{userId}/{notificationId}/read": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Mark a notification as read */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: string;
                    notificationId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Notification marked as read */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Notification"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/notifications/{userId}/read-all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Mark all notifications as read */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description All notifications marked as read */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example All notifications marked as read */
                            message?: string;
                            /** @example 5 */
                            updatedCount?: number;
                        };
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/restaurant-access/{restaurantId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Request access to a restaurant */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    restaurantId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        userId?: string;
                    };
                };
            };
            responses: {
                /** @description Access request created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Authorization request sent successfully */
                            message?: string;
                            restaurantAccess?: components["schemas"]["RestaurantAccess"];
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/restaurant-access/user/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get restaurant access by user ID */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of restaurant access for user (empty array if no access records found) */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            restaurantAccesses?: components["schemas"]["RestaurantAccess"][];
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/restaurant-access/owner/{ownerId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get restaurant access by owner ID */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    ownerId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of restaurant access for owner (empty array if no access records found) */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            restaurantAccesses?: components["schemas"]["RestaurantAccess"][];
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/restaurant-access/access/{accessId}/grant": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Grant restaurant access */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    accessId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Access granted */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Access granted successfully */
                            message?: string;
                            accessRecord?: components["schemas"]["RestaurantAccess"];
                        };
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/restaurant-access/access/{accessId}/suspend": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Suspend restaurant access */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    accessId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Access suspended */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Access Suspended Successfully */
                            message?: string;
                            accessRecord?: components["schemas"]["RestaurantAccess"];
                        };
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/restaurant-access/access/{accessId}/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Delete restaurant access */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    accessId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Access deleted */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Access deleted successfully */
                            message?: string;
                            accessRecord?: components["schemas"]["RestaurantAccess"];
                        };
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/restaurant-access/access/{accessId}/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update restaurant access role */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    accessId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        role?: string;
                    };
                };
            };
            responses: {
                /** @description Access role updated */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Role updated successfully */
                            message?: string;
                            accessRecord?: components["schemas"]["RestaurantAccess"];
                        };
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/user-types": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all user types */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of user types */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserType"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user-types/{userType}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user type by name
         * @description Retrieve a specific user type by its name
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The name of the user type to retrieve */
                    userType: "guest" | "user" | "admin" | "moderator" | "root";
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description User type retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserType"];
                    };
                };
                /** @description User type not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example User Type not found */
                            error?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/allergens": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all allergens
         * @description Retrieve all available allergens
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of allergens */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Allergen"][];
                    };
                };
            };
        };
        put?: never;
        /**
         * Create a new allergen
         * @description Create a new allergen with the provided details
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Allergen"];
                };
            };
            responses: {
                /** @description Allergen created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Allergen"];
                    };
                };
                /** @description Invalid request body */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/allergens/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get allergen by ID
         * @description Retrieve a specific allergen by its ID
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the allergen to retrieve */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Allergen retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Allergen"];
                    };
                };
                /** @description Allergen ID is required */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Allergen not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        /**
         * Update allergen
         * @description Update an existing allergen
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the allergen to update */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Allergen"];
                };
            };
            responses: {
                /** @description Allergen updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Allergen"];
                    };
                };
                /** @description Invalid input (missing ID or body) */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Allergen not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        post?: never;
        /**
         * Delete allergen
         * @description Delete an allergen by its ID
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the allergen to delete */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Allergen deleted successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Allergen deleted successfully */
                            message?: string;
                            data?: {
                                /** @example 507f1f77bcf86cd799439013 */
                                id?: string;
                            };
                        };
                    };
                };
                /** @description Allergen ID is required */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Allergen not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/courses": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all courses
         * @description Retrieve all available courses
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of courses */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Course"][];
                    };
                };
            };
        };
        put?: never;
        /**
         * Create a new course
         * @description Create a new course with the provided details
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Course"];
                };
            };
            responses: {
                /** @description Course created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Course"];
                    };
                };
                /** @description Invalid request body */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Invalid request body */
                            error?: string;
                        };
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Internal server error */
                            error?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/courses/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get course by ID
         * @description Retrieve a specific course by its ID
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the course to retrieve */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Course retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Course"];
                    };
                };
                /** @description Course ID is required */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Course ID is required */
                            error?: string;
                        };
                    };
                };
                /** @description Course not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Course not found */
                            error?: string;
                        };
                    };
                };
            };
        };
        /**
         * Update course
         * @description Update an existing course
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the course to update */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Course"];
                };
            };
            responses: {
                /** @description Course updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Course"];
                    };
                };
                /** @description Invalid input (missing ID or body) */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Course ID is required */
                            error?: string;
                        };
                    };
                };
                /** @description Course not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Course not found */
                            error?: string;
                        };
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Internal server error */
                            error?: string;
                        };
                    };
                };
            };
        };
        post?: never;
        /**
         * Delete course
         * @description Delete a course by its ID
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the course to delete */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Course deleted successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Course deleted successfully */
                            message?: string;
                        };
                    };
                };
                /** @description Course ID is required */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Course ID is required */
                            error?: string;
                        };
                    };
                };
                /** @description Course not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Course not found */
                            error?: string;
                        };
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Internal server error */
                            error?: string;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/cuisines": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all cuisines
         * @description Retrieve all available cuisines
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of cuisines */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Cuisine"][];
                    };
                };
            };
        };
        put?: never;
        /**
         * Create a new cuisine
         * @description Create a new cuisine with the provided details
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Cuisine"];
                };
            };
            responses: {
                /** @description Cuisine created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Cuisine"];
                    };
                };
                /** @description Invalid request body */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Invalid request body */
                            error?: string;
                        };
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Internal server error */
                            error?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/cuisines/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get cuisine by ID
         * @description Retrieve a specific cuisine by its ID
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the cuisine to retrieve */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Cuisine retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Cuisine"];
                    };
                };
                /** @description Cuisine ID is required */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example ID is required */
                            error?: string;
                        };
                    };
                };
                /** @description Cuisine not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Cuisine type not found */
                            error?: string;
                        };
                    };
                };
            };
        };
        /**
         * Update cuisine
         * @description Update an existing cuisine
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the cuisine to update */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Cuisine"];
                };
            };
            responses: {
                /** @description Cuisine updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Cuisine"];
                    };
                };
                /** @description Invalid input (missing ID or body) */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Cuisine ID is required */
                            error?: string;
                        };
                    };
                };
                /** @description Cuisine not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Cuisine type not found */
                            error?: string;
                        };
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Internal server error */
                            error?: string;
                        };
                    };
                };
            };
        };
        post?: never;
        /**
         * Delete cuisine
         * @description Delete a cuisine by its ID
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the cuisine to delete */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Cuisine deleted successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Cuisine type deleted successfully */
                            message?: string;
                        };
                    };
                };
                /** @description Cuisine ID is required */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example ID is required */
                            error?: string;
                        };
                    };
                };
                /** @description Cuisine not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Cuisine type not found */
                            error?: string;
                        };
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Internal server error */
                            error?: string;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/media": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create new media
         * @description Upload and create a new media item
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * Format: uri
                         * @description URL to the media file
                         * @example https://example.com/images/restaurant-photo.jpg
                         */
                        url: string;
                        /**
                         * @description Type of media file
                         * @example image
                         * @enum {string}
                         */
                        type: "image" | "video" | "audio";
                        /**
                         * @description Title or caption for the media
                         * @example Restaurant Interior
                         */
                        title?: string;
                        /**
                         * @description Description of the media content
                         * @example Beautiful interior view of the restaurant
                         */
                        description?: string;
                        /** @description Information about what this media is associated with */
                        associatedWith?: {
                            /**
                             * @description Type of content this media is associated with
                             * @example post
                             * @enum {string}
                             */
                            type?: "post" | "dish" | "restaurant";
                            /**
                             * @description ID of the associated content
                             * @example 507f1f77bcf86cd799439016
                             */
                            id?: string;
                        };
                        /**
                         * @description Size of the media file in bytes
                         * @example 2048576
                         */
                        fileSize?: number;
                        /**
                         * @description MIME type of the media file
                         * @example image/jpeg
                         */
                        mimeType?: string;
                        /** @description Dimensions of the media (for images/videos) */
                        dimensions?: {
                            /**
                             * @description Width of the media in pixels
                             * @example 1920
                             */
                            width?: number;
                            /**
                             * @description Height of the media in pixels
                             * @example 1080
                             */
                            height?: number;
                        };
                    };
                };
            };
            responses: {
                /** @description Media created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Media"];
                    };
                };
                /** @description Invalid request body */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description User not authenticated */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/media/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get media by ID
         * @description Retrieve a specific media item by its ID
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the media to retrieve */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Media retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Media"];
                    };
                };
                /** @description Media not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        /**
         * Update media
         * @description Update an existing media item
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the media to update */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * @description Title or caption for the media
                         * @example Updated Restaurant Interior
                         */
                        title?: string;
                        /**
                         * @description Description of the media content
                         * @example Updated description of the restaurant interior
                         */
                        description?: string;
                        /** @description Information about what this media is associated with */
                        associatedWith?: {
                            /**
                             * @description Type of content this media is associated with
                             * @example post
                             * @enum {string}
                             */
                            type?: "post" | "dish" | "restaurant";
                            /**
                             * @description ID of the associated content
                             * @example 507f1f77bcf86cd799439016
                             */
                            id?: string;
                        };
                    };
                };
            };
            responses: {
                /** @description Media updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Media"];
                    };
                };
                /** @description Invalid input */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description User not authenticated */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Not authorized to update this media */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Media not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        post?: never;
        /**
         * Delete media
         * @description Delete a media item by its ID
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the media to delete */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Media deleted successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Media deleted successfully */
                            message?: string;
                        };
                    };
                };
                /** @description User not authenticated */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Not authorized to delete this media */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Media not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/media/associated/{type}/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get media by associated item
         * @description Retrieve media items associated with a specific content type and ID
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Type of content (post, dish, restaurant) */
                    type: "post" | "dish" | "restaurant";
                    /** @description ID of the associated content */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Media items retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Media"][];
                    };
                };
                /** @description Invalid type or missing ID */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/media/user/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user's media
         * @description Retrieve media items uploaded by a specific user with pagination
         */
        get: {
            parameters: {
                query?: {
                    /** @description Page number for pagination */
                    page?: number;
                    /** @description Number of items per page */
                    limit?: number;
                };
                header?: never;
                path: {
                    /** @description ID of the user */
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description User's media retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            media?: components["schemas"]["Media"][];
                            pagination?: {
                                /**
                                 * @description Current page number
                                 * @example 1
                                 */
                                currentPage?: number;
                                /**
                                 * @description Total number of pages
                                 * @example 5
                                 */
                                totalPages?: number;
                                /**
                                 * @description Total number of media items
                                 * @example 50
                                 */
                                totalMedia?: number;
                                /**
                                 * @description Whether there is a next page
                                 * @example true
                                 */
                                hasNextPage?: boolean;
                                /**
                                 * @description Whether there is a previous page
                                 * @example false
                                 */
                                hasPrevPage?: boolean;
                            };
                        };
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/media/{id}/verify": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Verify media
         * @description Mark media as verified by moderators
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Media verified successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Media"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Media not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/media/verified": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get verified media
         * @description Retrieve verified media items with optional filtering and pagination
         */
        get: {
            parameters: {
                query?: {
                    /** @description Page number for pagination */
                    page?: number;
                    /** @description Number of items per page */
                    limit?: number;
                    /** @description Filter by media type (post, dish) */
                    type?: "post" | "dish";
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Verified media retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            media?: components["schemas"]["Media"][];
                            pagination?: {
                                /**
                                 * @description Current page number
                                 * @example 1
                                 */
                                currentPage?: number;
                                /**
                                 * @description Total number of pages
                                 * @example 5
                                 */
                                totalPages?: number;
                                /**
                                 * @description Total number of media items
                                 * @example 50
                                 */
                                totalMedia?: number;
                                /**
                                 * @description Whether there is a next page
                                 * @example true
                                 */
                                hasNextPage?: boolean;
                                /**
                                 * @description Whether there is a previous page
                                 * @example false
                                 */
                                hasPrevPage?: boolean;
                            };
                        };
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/posts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all posts
         * @description Retrieve all posts with optional filtering
         */
        get: {
            parameters: {
                query?: {
                    /** @description Page number for pagination */
                    page?: number;
                    /** @description Number of posts per page */
                    limit?: number;
                    /** @description Filter by cuisine type ID */
                    cuisine?: string;
                    /** @description Filter by course type ID */
                    course?: string;
                    /** @description Filter by visibility setting */
                    visibility?: "public" | "private" | "followers";
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of posts with pagination */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            posts?: components["schemas"]["Post"][];
                            pagination?: {
                                currentPage?: number;
                                totalPages?: number;
                                totalPosts?: number;
                                hasNextPage?: boolean;
                                hasPrevPage?: boolean;
                            };
                        };
                    };
                };
            };
        };
        put?: never;
        /**
         * Create a new post
         * @description Create a new food post with media, location, and optional food catalogue reference
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Post"];
                };
            };
            responses: {
                /** @description Post created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Post"];
                    };
                };
                /** @description Invalid request body */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description User not authenticated */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/posts/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get post by ID
         * @description Retrieve a specific post by its ID
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Post retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Post"];
                    };
                };
                /** @description Post not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        /**
         * Update post
         * @description Update an existing post
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Post"];
                };
            };
            responses: {
                /** @description Post updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Post"];
                    };
                };
                /** @description Invalid request body */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description User not authenticated */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Not authorized to update this post */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Post not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        post?: never;
        /**
         * Delete post
         * @description Delete a post
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Post deleted successfully */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description User not authenticated */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Not authorized to delete this post */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Post not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/posts/user/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get posts by user
         * @description Retrieve all posts created by a specific user
         */
        get: {
            parameters: {
                query?: {
                    /** @description Page number for pagination */
                    page?: number;
                    /** @description Number of posts per page */
                    limit?: number;
                };
                header?: never;
                path: {
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of user posts with pagination */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            posts?: components["schemas"]["Post"][];
                            pagination?: {
                                currentPage?: number;
                                totalPages?: number;
                                totalPosts?: number;
                                hasNextPage?: boolean;
                                hasPrevPage?: boolean;
                            };
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/posts/restaurant/{restaurantId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get posts by restaurant
         * @description Retrieve all posts associated with a specific restaurant
         */
        get: {
            parameters: {
                query?: {
                    /** @description Page number for pagination */
                    page?: number;
                    /** @description Number of posts per page */
                    limit?: number;
                };
                header?: never;
                path: {
                    restaurantId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of restaurant posts with pagination */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            posts?: components["schemas"]["Post"][];
                            pagination?: {
                                currentPage?: number;
                                totalPages?: number;
                                totalPosts?: number;
                                hasNextPage?: boolean;
                                hasPrevPage?: boolean;
                            };
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/posts/food/{foodCatalogueId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get posts by food catalogue item
         * @description Retrieve all posts that reference a specific food catalogue item
         */
        get: {
            parameters: {
                query?: {
                    /** @description Page number for pagination */
                    page?: number;
                    /** @description Number of posts per page */
                    limit?: number;
                };
                header?: never;
                path: {
                    foodCatalogueId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of food posts with pagination */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            posts?: components["schemas"]["Post"][];
                            pagination?: {
                                currentPage?: number;
                                totalPages?: number;
                                totalPosts?: number;
                                hasNextPage?: boolean;
                                hasPrevPage?: boolean;
                            };
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/posts/{id}/like": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Like or unlike a post
         * @description Toggle like status for a post
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Like status updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            post?: components["schemas"]["Post"];
                            liked?: boolean;
                            likeCount?: number;
                        };
                    };
                };
                /** @description User not authenticated */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Post not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/posts/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search posts
         * @description Search posts by food name, caption, or tags
         */
        get: {
            parameters: {
                query: {
                    /** @description Search query */
                    q: string;
                    /** @description Page number for pagination */
                    page?: number;
                    /** @description Number of posts per page */
                    limit?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Search results with pagination */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            posts?: components["schemas"]["Post"][];
                            pagination?: {
                                currentPage?: number;
                                totalPages?: number;
                                totalPosts?: number;
                                hasNextPage?: boolean;
                                hasPrevPage?: boolean;
                            };
                        };
                    };
                };
                /** @description Search query is required */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/posts/{postId}/tag-food": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Tag food in post
         * @description Add or update a food tag in a post with optional rating and review
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the post to tag food in */
                    postId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * @description ID of the food catalogue item to tag
                         * @example 507f1f77bcf86cd799439016
                         */
                        foodCatalogueId: string;
                        /**
                         * @description Type of tag for this food item
                         * @default primary
                         * @example primary
                         * @enum {string}
                         */
                        tagType?: "primary" | "secondary" | "mentioned" | "reviewed";
                        /**
                         * @description Optional rating for this food item (1-5)
                         * @example 5
                         */
                        rating?: number;
                        /**
                         * @description Optional review text for this food item
                         * @example Delicious! The best pizza I've ever had.
                         */
                        review?: string;
                    };
                };
            };
            responses: {
                /** @description Food tagged successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Post"];
                    };
                };
                /** @description Invalid request body */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description User not authenticated */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Not authorized to modify this post */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Post not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/posts/{postId}/tag-food/{foodCatalogueId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove food tag from post
         * @description Remove a food tag from a post
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the post to remove tag from */
                    postId: string;
                    /** @description ID of the food catalogue item to remove tag for */
                    foodCatalogueId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Food tag removed successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Post"];
                    };
                };
                /** @description User not authenticated */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Not authorized to modify this post */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Post not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        ErrorResponse: {
            /**
             * @description A human-readable description of the error.
             * @example An unexpected error has occured
             */
            message?: string;
            /**
             * @description Detailed error message.
             * @example Database connection failed
             */
            error?: string;
        };
        User: {
            /**
             * @description Unique identifier for the user
             * @example 507f1f77bcf86cd799439011
             */
            _id?: string;
            /** @example anthony_ukutegbe */
            username?: string;
            /** @example +2347012345678 */
            phone?: string;
            /** @example Anthony Ukutegbe */
            name: string;
            /**
             * Format: email
             * @example anthony@test.com
             */
            email: string;
            /** @example Lagos */
            hometown?: string;
            /** @example Abuja */
            currentCity?: string;
            /** @example Nigeria */
            country?: string;
            /** @example https://example.com/avatar.jpg */
            imageUrl?: string;
            /** @example 123, Some Street, City */
            address?: string;
            /**
             * Format: password
             * @example strongPassword123
             */
            password: string;
            /** @example false */
            isVerified?: boolean;
            userType: components["schemas"]["UserType"];
            /**
             * Format: date-time
             * @example 2025-04-20T15:30:00Z
             */
            createdAt?: string;
            /**
             * Format: date-time
             * @example 2025-04-20T15:30:00Z
             */
            updatedAt?: string;
        };
        Allergen: {
            /**
             * @description Unique identifier for the allergen
             * @example 507f1f77bcf86cd799439013
             */
            _id?: string;
            /** @example egg */
            name: string;
            /** @example allergic reaction to eggs and food that has egg content */
            description: string;
            /**
             * Format: date-time
             * @example 2025-04-20T15:30:00Z
             */
            createdAt?: string;
            /**
             * Format: date-time
             * @example 2025-04-20T15:30:00Z
             */
            updatedAt?: string;
        };
        Course: {
            /**
             * @description Unique identifier for the course
             * @example 507f1f77bcf86cd799439014
             */
            _id?: string;
            /** @example main */
            name: string;
            /** @example Main course in a meal */
            description: string;
            /**
             * Format: date-time
             * @example 2025-04-20T15:30:00Z
             */
            createdAt?: string;
            /**
             * Format: date-time
             * @example 2025-04-20T15:30:00Z
             */
            updatedAt?: string;
        };
        Cuisine: {
            /**
             * @description Unique identifier for the cuisine
             * @example 507f1f77bcf86cd799439015
             */
            _id?: string;
            /** @example Nigerian */
            name: string;
            /** @example A Type of meal based on region of origin */
            description: string;
            /**
             * Format: date-time
             * @example 2025-04-20T15:30:00Z
             */
            createdAt?: string;
            /**
             * Format: date-time
             * @example 2025-04-20T15:30:00Z
             */
            updatedAt?: string;
        };
        BusinessHour: {
            /** @enum {string} */
            day?: "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday" | "Sunday";
            /** @description Opening time in HH:mm format */
            open?: string;
            /** @description Closing time in HH:mm format */
            close?: string;
            /**
             * @description Indicates if the restaurant is closed on this day
             * @default false
             */
            closed: boolean;
        };
        Restaurant: {
            /**
             * @description Unique identifier for the restaurant
             * @example 507f1f77bcf86cd799439011
             */
            _id?: string;
            /** @description Unique identifier for the restaurant owner */
            ownerId: string;
            /**
             * @description Whether the current user is the owner of this restaurant
             * @default false
             */
            owner: boolean;
            /** @description Name of the restaurant */
            name: string;
            /** @description Restaurant logo media */
            logo?: components["schemas"]["Media"];
            /** @description Brief description of the restaurant */
            description?: string;
            /** @description List of cuisines offered by the restaurant */
            cuisine?: components["schemas"]["Cuisine"][];
            /**
             * @description Price range of the restaurant
             * @enum {string}
             */
            priceRange?: "$" | "$$" | "$$$" | "$$$$";
            /** @description Physical address of the restaurant */
            address?: string;
            /** @description Contact phone number */
            phone?: string;
            /**
             * Format: email
             * @description Contact email address
             */
            email?: string;
            /**
             * Format: uri
             * @description Website URL of the restaurant
             */
            website?: string;
            /** @description Operating hours for each day of the week */
            businessHours?: components["schemas"]["BusinessHour"][];
            /** @description List of features available at the restaurant */
            features?: components["schemas"]["RestaurantFeature"][];
            /** @description Gallery media items for the restaurant */
            gallery?: components["schemas"]["Media"][];
            /** @description List of delivery links for the restaurant */
            deliveryLinks?: components["schemas"]["DeliveryLink"][];
            /** @description Additional metadata associated with the restaurant */
            meta?: {
                [key: string]: unknown;
            };
        };
        /**
         * @description Supported currency types
         * @example USD
         * @enum {string}
         */
        Currency: "USD" | "EUR" | "GBP" | "CAD" | "AUD" | "JPY" | "CNY" | "KRW" | "MYR" | "TWD" | "VND" | "THB" | "ZAR";
        Price: {
            /**
             * @description The price amount
             * @example 25.99
             */
            amount: number;
            /**
             * @description Currency type
             * @example USD
             */
            currency: components["schemas"]["Currency"];
        };
        FoodCatalogue: {
            /**
             * @description Unique identifier for the food catalogue item
             * @example 507f1f77bcf86cd799439016
             */
            _id?: string;
            /**
             * @description The name of the food item
             * @example Spaghetti Bolognese
             */
            name: string;
            /**
             * @description List of ingredients used in the food item
             * @example [
             *       "Spaghetti",
             *       "Ground beef",
             *       "Tomato sauce"
             *     ]
             */
            ingredients: string[];
            /** @description Cuisine type the food belongs to */
            cuisineType: components["schemas"]["Cuisine"];
            /** @description List of allergens associated with the food */
            allergens?: components["schemas"]["Allergen"][];
            /** @description Course type the food belongs to (e.g., starter, main) */
            course: components["schemas"]["Course"];
            /** @description Price details for the food item */
            price: components["schemas"]["Price"];
            /** @description Media items for the food item */
            images: components["schemas"]["Media"][];
            /**
             * @description ID of the restaurant offering the food item
             * @example restaurant12345
             */
            restaurant: string;
            /**
             * @description Keywords for better search matching (auto-generated from name, ingredients, etc.)
             * @example [
             *       "spaghetti",
             *       "bolognese",
             *       "pasta",
             *       "ground beef",
             *       "tomato sauce"
             *     ]
             */
            searchKeywords?: string[];
            /**
             * @description Whether the food item is currently available
             * @default true
             * @example true
             */
            isAvailable: boolean;
            /**
             * @description Whether the food item is featured/promoted
             * @default false
             * @example false
             */
            isFeatured: boolean;
            /**
             * @description Calculated price range based on price amount
             * @example $$
             * @enum {string}
             */
            priceRange?: "$" | "$$" | "$$$" | "$$$$";
            analytics?: {
                /**
                 * @description Total number of mentions in posts
                 * @default 0
                 * @example 15
                 */
                totalMentions: number;
                /**
                 * @description Total number of likes received
                 * @default 0
                 * @example 120
                 */
                totalLikes: number;
                /**
                 * @description Average rating from reviews
                 * @default 0
                 * @example 4.5
                 */
                averageRating: number;
                /**
                 * @description Total number of ratings received
                 * @default 0
                 * @example 25
                 */
                totalRatings: number;
                /**
                 * @description Trending score based on recent activity
                 * @default 0
                 * @example 85.5
                 */
                trendingScore: number;
                /**
                 * Format: date-time
                 * @description When the food item was last mentioned
                 * @example 2025-04-20T15:30:00Z
                 */
                lastMentioned?: string;
                /**
                 * @description Number of times this item appeared in search results
                 * @default 0
                 * @example 45
                 */
                searchViews: number;
                /**
                 * @description Number of times this item was clicked from search
                 * @default 0
                 * @example 12
                 */
                searchClicks: number;
                /**
                 * @description Calculated popularity score based on various metrics
                 * @default 0
                 * @example 78.3
                 */
                popularityScore: number;
            };
            /**
             * Format: date-time
             * @description When the food item was created
             * @example 2025-04-20T15:30:00Z
             */
            createdAt?: string;
            /**
             * Format: date-time
             * @description When the food item was last updated
             * @example 2025-04-20T15:30:00Z
             */
            updatedAt?: string;
        };
        Notification: {
            /**
             * @description Unique identifier for the notification
             * @example 507f1f77bcf86cd799439017
             */
            _id: string;
            /**
             * @description ID of the user who owns this notification
             * @example user_12345
             */
            userId: string;
            /**
             * @description Type of notification
             * @example access_request
             * @enum {string}
             */
            type: "access_request" | "access_granted" | "access_denied" | "access_suspended" | "restaurant_update" | "system";
            /**
             * @description Notification title
             * @example Access Request
             */
            title?: string;
            /**
             * @description Notification message
             * @example Your access request for Restaurant ABC has been approved
             */
            message: string;
            /**
             * @description Whether the notification has been read
             * @default false
             * @example false
             */
            isRead: boolean;
            /**
             * @description Additional data related to the notification
             * @example {
             *       "restaurantId": "rest_12345",
             *       "restaurantName": "Restaurant ABC"
             *     }
             */
            metadata?: {
                [key: string]: unknown;
            };
            /**
             * Format: date-time
             * @description When the notification was created
             * @example 2025-04-20T15:30:00Z
             */
            createdAt?: string;
            /**
             * Format: date-time
             * @description When the notification was last updated
             * @example 2025-04-20T15:30:00Z
             */
            updatedAt?: string;
        };
        Media: {
            /**
             * @description Unique identifier for the media
             * @example 507f1f77bcf86cd799439017
             */
            _id?: string;
            /**
             * Format: uri
             * @description URL to the media file
             * @example https://example.com/images/restaurant-photo.jpg
             */
            url: string;
            /**
             * @description Type of media file
             * @example image
             * @enum {string}
             */
            type: "image" | "video" | "audio";
            /**
             * @description Title or caption for the media
             * @example Restaurant Interior
             */
            title?: string;
            /**
             * @description Description of the media content
             * @example Beautiful interior view of the restaurant
             */
            description?: string;
            /**
             * @description ID of the user who uploaded the media
             * @example 507f1f77bcf86cd799439011
             */
            uploadedBy: string;
            /** @description Information about what this media is associated with */
            associatedWith?: {
                /**
                 * @description Type of content this media is associated with
                 * @example post
                 * @enum {string}
                 */
                type?: "post" | "dish" | "restaurant";
                /**
                 * @description ID of the associated content
                 * @example 507f1f77bcf86cd799439016
                 */
                id?: string;
            };
            /**
             * @description Whether the media has been verified by moderators
             * @default false
             * @example false
             */
            verified: boolean;
            /**
             * @description Size of the media file in bytes
             * @example 2048576
             */
            fileSize?: number;
            /**
             * @description MIME type of the media file
             * @example image/jpeg
             */
            mimeType?: string;
            /** @description Dimensions of the media (for images/videos) */
            dimensions?: {
                /**
                 * @description Width of the media in pixels
                 * @example 1920
                 */
                width?: number;
                /**
                 * @description Height of the media in pixels
                 * @example 1080
                 */
                height?: number;
            };
            /**
             * Format: date-time
             * @description When the media was uploaded
             * @example 2025-04-20T15:30:00Z
             */
            createdAt?: string;
            /**
             * Format: date-time
             * @description When the media was last updated
             * @example 2025-04-20T15:30:00Z
             */
            updatedAt?: string;
        };
        RestaurantAccess: {
            /**
             * @description Unique identifier for the access record
             * @example access_12345
             */
            _id: string;
            /**
             * @description ID of the user requesting access
             * @example user_12345
             */
            userId: string;
            /**
             * @description ID of the restaurant
             * @example rest_12345
             */
            restaurantId: string;
            /**
             * @description Current status of the access request
             * @example pending
             * @enum {string}
             */
            status: "pending" | "approved" | "suspended" | "innactive";
            /**
             * @description Role assigned to the user (references UserType.name)
             * @example user
             * @enum {string}
             */
            role?: "guest" | "user" | "moderator" | "admin" | "root";
            /**
             * Format: date-time
             * @description When the access was requested
             * @example 2025-04-20T15:30:00Z
             */
            requestedAt?: string;
            /**
             * Format: date-time
             * @description When the access was granted (if applicable)
             * @example 2025-04-20T16:00:00Z
             */
            grantedAt?: string;
            /**
             * @description ID of the user who granted access
             * @example owner_12345
             */
            grantedBy?: string;
            /**
             * Format: date-time
             * @description When the access expires (if applicable)
             * @example 2025-12-31T23:59:59Z
             */
            expiresAt?: string;
            /**
             * @description Additional notes about the access
             * @example Temporary access for project collaboration
             */
            notes?: string;
            /**
             * Format: date-time
             * @description When the access record was created
             * @example 2025-04-20T15:30:00Z
             */
            createdAt?: string;
            /**
             * Format: date-time
             * @description When the access record was last updated
             * @example 2025-04-20T15:30:00Z
             */
            updatedAt?: string;
        };
        UserType: {
            /**
             * @description Unique identifier for the user type
             * @example 507f1f77bcf86cd799439012
             */
            _id?: string;
            /**
             * @description Name of the user type
             * @example user
             * @enum {string}
             */
            name: "guest" | "user" | "admin" | "moderator" | "root";
            /**
             * @description Access level (1=lowest, 5=highest)
             * @example 2
             */
            level: number;
            /**
             * @description Description of the user type
             * @example an ordinary user with restaurant access
             */
            description: string;
        };
        DeliveryLink: {
            /**
             * @description Unique identifier for the delivery link
             * @example 507f1f77bcf86cd799439018
             */
            _id?: string;
            /**
             * @description ID of the restaurant this delivery link belongs to
             * @example 507f1f77bcf86cd799439011
             */
            restaurantId: string;
            /**
             * @description Display name for the delivery link
             * @example Uber Eats
             */
            name: string;
            /**
             * Format: uri
             * @description URL to the delivery service
             * @example https://ubereats.com/restaurant/123
             */
            url: string;
            /**
             * @description Delivery platform name
             * @example Uber Eats
             * @enum {string}
             */
            platform: "Uber Eats" | "DoorDash" | "Grubhub" | "Postmates" | "Instacart" | "Amazon Fresh" | "Walmart Grocery" | "Shipt" | "Custom" | "Other";
            /**
             * @description Whether this delivery link is active
             * @default true
             */
            isActive: boolean;
            /**
             * Format: date-time
             * @description When the delivery link was created
             * @example 2025-04-20T15:30:00Z
             */
            createdAt?: string;
            /**
             * Format: date-time
             * @description When the delivery link was last updated
             * @example 2025-04-20T15:30:00Z
             */
            updatedAt?: string;
        };
        /**
         * @description Available restaurant features
         * @enum {string}
         */
        RestaurantFeature: "Outdoor seating" | "Indoor dining" | "Private dining rooms" | "Bar seating" | "Counter seating" | "Rooftop dining" | "Garden dining" | "Waterfront dining" | "Street-side dining" | "Patio dining" | "Take-out" | "Delivery" | "Drive-through" | "Curbside pickup" | "Catering" | "Private events" | "Corporate events" | "Wedding catering" | "Party catering" | "Food trucks" | "Free WiFi" | "Mobile ordering" | "Online reservations" | "Contactless payment" | "Digital menus" | "QR code menus" | "Self-service kiosks" | "Table service" | "Counter service" | "Buffet service" | "Wheelchair accessible" | "Accessible parking" | "Accessible restrooms" | "Braille menus" | "Service animal friendly" | "Elevator access" | "Ramp access" | "Live music" | "Sports on TV" | "Background music" | "Dance floor" | "Karaoke" | "Trivia nights" | "Comedy nights" | "Wine tastings" | "Cooking classes" | "Chef's table" | "Free parking" | "Valet parking" | "Street parking" | "Parking garage" | "Bike parking" | "Near public transit" | "Uber/Lyft friendly" | "Kid-friendly" | "High chairs" | "Kids menu" | "Play area" | "Changing tables" | "Family restrooms" | "Birthday parties" | "Vegetarian options" | "Vegan options" | "Gluten-free options" | "Halal options" | "Kosher options" | "Dairy-free options" | "Nut-free options" | "Low-sodium options" | "Organic ingredients" | "Local ingredients" | "Full bar" | "Wine list" | "Craft beer" | "Cocktails" | "Happy hour" | "BYOB" | "Coffee service" | "Tea service" | "Juice bar" | "Smoothies" | "Gift cards" | "Loyalty program" | "Rewards program" | "Group discounts" | "Student discounts" | "Senior discounts" | "Military discounts" | "Corporate accounts" | "Catering delivery" | "Event planning" | "Contactless delivery" | "Sanitized surfaces" | "Staff wearing masks" | "Temperature checks" | "Social distancing" | "Air purification" | "UV sanitization" | "Health inspections" | "Food safety certified" | "Allergen information" | "Credit cards accepted" | "Cash only" | "Digital payments" | "Split bills" | "Gratuity included" | "Tipping accepted" | "Corporate billing" | "Invoice available" | "24/7 service" | "Late night dining" | "Breakfast service" | "Lunch service" | "Dinner service" | "Brunch service" | "Holiday hours" | "Seasonal hours" | "Reservations required" | "Walk-ins welcome" | "Romantic dining" | "Anniversary specials" | "Birthday celebrations" | "Date night" | "Business meetings" | "Networking events" | "Graduation parties" | "Holiday parties" | "Corporate lunches" | "Team building";
        Post: {
            /**
             * @description Unique identifier for the post
             * @example 507f1f77bcf86cd799439019
             */
            _id?: string;
            /**
             * @description ID of the user who created the post
             * @example 507f1f77bcf86cd799439011
             */
            userId: string;
            /**
             * @description Array of media IDs associated with the post
             * @example [
             *       "507f1f77bcf86cd799439017"
             *     ]
             */
            media: string[];
            /**
             * @description Name of the food item in the post
             * @example Margherita Pizza
             */
            foodName: string;
            /**
             * @description Array of food items tagged in this post with metadata
             * @example []
             */
            taggedFoods?: {
                /**
                 * @description ID of the food catalogue item being tagged
                 * @example 507f1f77bcf86cd799439016
                 */
                foodCatalogueId: string;
                /**
                 * @description Type of tag for this food item
                 * @default primary
                 * @example primary
                 * @enum {string}
                 */
                tagType: "primary" | "secondary" | "mentioned" | "reviewed";
                /**
                 * @description Optional rating for this food item (1-5)
                 * @example 5
                 */
                rating?: number;
                /**
                 * @description Optional review text for this food item
                 * @example Delicious! The best pizza I've ever had.
                 */
                review?: string;
                /**
                 * Format: date-time
                 * @description When this food was tagged
                 * @example 2025-04-20T15:30:00Z
                 */
                taggedAt: string;
            }[];
            /** @description Price information for the food item */
            price: components["schemas"]["Price"];
            /** @description Location information including restaurant and coordinates */
            location: {
                /**
                 * @description ID of the restaurant where the food was consumed
                 * @example 507f1f77bcf86cd799439011
                 */
                restaurantId: string;
                coordinates: {
                    /**
                     * @description Type of geometry
                     * @default Point
                     * @enum {string}
                     */
                    type: "Point";
                    /**
                     * @description Longitude and latitude coordinates [longitude, latitude]
                     * @example [
                     *       -73.935242,
                     *       40.73061
                     *     ]
                     */
                    coordinates: number[];
                };
            };
            /**
             * @description ID of the cuisine type
             * @example 507f1f77bcf86cd799439015
             */
            cuisine: string;
            /**
             * @description ID of the course type
             * @example 507f1f77bcf86cd799439014
             */
            course: string;
            /**
             * @description Array of allergen IDs
             * @example [
             *       "507f1f77bcf86cd799439013"
             *     ]
             */
            allergens?: string[];
            /**
             * @description Optional caption or description for the post
             * @example Amazing pizza! The crust was perfectly crispy 🍕
             */
            caption?: string;
            /**
             * @description Array of tags for categorizing the post
             * @example [
             *       "delicious",
             *       "authentic",
             *       "wood-fired"
             *     ]
             */
            tags?: string[];
            /**
             * @description Array of user IDs who liked the post
             * @example [
             *       "507f1f77bcf86cd799439011"
             *     ]
             */
            likes?: string[];
            /**
             * @description Visibility setting for the post
             * @default public
             * @enum {string}
             */
            visibility: "public" | "private" | "followers";
            /**
             * Format: date-time
             * @description When the post was created
             * @example 2025-04-20T15:30:00Z
             */
            createdAt?: string;
            /**
             * Format: date-time
             * @description When the post was last updated
             * @example 2025-04-20T15:30:00Z
             */
            updatedAt?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
