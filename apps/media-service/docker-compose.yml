version: '3.8'

services:
  media-service:
    build: .
    ports:
      - '3003:3000'
    environment:
      - NODE_ENV=development
      - PORT=3000
      - MONGODB_URI=mongodb://mongodb:27017/media-service
      - MONGODB_DATABASE=media-service
      - CLOUDINARY_CLOUD_NAME=${CLOUDINARY_CLOUD_NAME}
      - CLOUDINARY_API_KEY=${CLOUDINARY_API_KEY}
      - CLOUDINARY_API_SECRET=${CLOUDINARY_API_SECRET}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - AWS_S3_BUCKET_NAME=${AWS_S3_BUCKET_NAME}
      - MAX_FILE_SIZE=${MAX_FILE_SIZE:-104857600}
      - RATE_LIMIT_TTL=${RATE_LIMIT_TTL:-60}
      - RATE_LIMIT_LIMIT=${RATE_LIMIT_LIMIT:-100}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-*}
    volumes:
      - ./temp:/app/temp
    depends_on:
      - mongodb
    restart: unless-stopped
    healthcheck:
      test:
        ['CMD', 'curl', '-f', 'http://localhost:3000/api/v1/media/health/check']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  mongodb:
    image: mongo:7.0
    ports:
      - '27018:27017'
    environment:
      - MONGO_INITDB_DATABASE=media-service
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'mongosh', '--eval', "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Optional: Redis for caching (future enhancement)
  # redis:
  #   image: redis:7-alpine
  #   ports:
  #     - "6379:6379"
  #   volumes:
  #     - redis_data:/data
  #   restart: unless-stopped

  # Optional: PostgreSQL for metadata storage (future enhancement)
  # postgres:
  #   image: postgres:15-alpine
  #   environment:
  #     POSTGRES_DB: media_service
  #     POSTGRES_USER: media_user
  #     POSTGRES_PASSWORD: ${DB_PASSWORD}
  #   ports:
  #     - "5432:5432"
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #   restart: unless-stopped

volumes:
  mongodb_data:
  # redis_data:
  # postgres_data:
