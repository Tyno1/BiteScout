/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/auth/register": {
    /**
     * Register a new user
     * @description Register a new user with the provided details
     */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @example Anthony */
            firstName: string;
            /** @example Ukutegbe */
            lastName: string;
            /**
             * Format: email
             * @example anthony@test.com
             */
            email: string;
            /**
             * Format: password
             * @example strongPassword123
             */
            password: string;
          };
        };
      };
      responses: {
        /** @description Successfully registered user */
        201: {
          content: {
            "application/json": {
              /** @example Registration successful */
              message?: string;
              user?: {
                /** @example Anthony Ukutegbe */
                name?: string;
                /**
                 * Format: email
                 * @example anthony@test.com
                 */
                email?: string;
                userType?: {
                  /** @example user */
                  name?: string;
                  /** @example 1 */
                  level?: number;
                  /** @example an ordinary user with restaurnat access */
                  description?: string;
                };
              };
            };
          };
        };
        /** @description Missing required field or invalid user type */
        400: {
          content: {
            "application/json": {
              /** @example Missing required field or user type not found */
              message?: string;
            };
          };
        };
        /** @description Conflict â€“ User already exists */
        409: {
          content: {
            "application/json": {
              /** @example User already exists */
              message?: string;
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
  };
  "/api/auth/login": {
    post: {
      requestBody: {
        content: {
          "application/json": {
            /**
             * Format: email
             * @example anthony@test.com
             */
            email: string;
            /**
             * Format: password
             * @example strongPassword123
             */
            password: string;
          };
        };
      };
      responses: {
        /** @description Login Successfull */
        200: {
          content: {
            "application/json": {
              /** @example Login successful */
              message?: string;
              user?: components["schemas"]["User"];
              /** @example -access token here- */
              accessToken?: string;
              /** @example -refresh token here- */
              refreshToken?: string;
              /**
               * Format: int64
               * @description Expiration time as a Unix timestamp in milliseconds
               * @example 1713649200000
               */
              expiresIn?: number;
            };
          };
        };
        /** @description Missing required field or invalid credentials */
        400: {
          content: {
            "application/json": {
              /** @example Missing required fields */
              message?: string;
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
  };
  "/api/auth/refresh": {
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @example -refresh token here- */
            refreshToken: string;
          };
        };
      };
      responses: {
        /** @description Token refresh successful */
        200: {
          content: {
            "application/json": {
              /** @example Refresh Token Successfull */
              message?: string;
              /** @example -new access token here- */
              accessToken?: string;
              /** @example -new refresh token here- */
              refreshToken?: string;
              /**
               * Format: int64
               * @description Expiration time as a Unix timestamp in milliseconds
               * @example 1713649200000
               */
              expiresIn?: number;
            };
          };
        };
        /** @description Refresh token not found or Invalid Token */
        400: {
          content: {
            "application/json": {
              /** @example Refresh token not found */
              message?: string;
            };
          };
        };
        /** @description Internal Server error */
        401: {
          content: {
            "application/json": {
              /** @example Invalid Refresh Token Request */
              message?: string;
            };
          };
        };
      };
    };
  };
  "/api/user/{userId}": {
    put: {
      parameters: {
        path: {
          /** @description The ID of the user to update */
          userId: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      responses: {
        /** @description User updated successfully */
        200: {
          content: {
            "application/json": components["schemas"]["User"];
          };
        };
        /** @description Invalid input */
        400: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
        /** @description User not found */
        404: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
  };
  "/api/restaurants": {
    /** Get all restaurants */
    get: {
      responses: {
        /** @description List of restaurants */
        200: {
          content: {
            "application/json": components["schemas"]["Restaurant"][];
          };
        };
      };
    };
    /** Create a new restaurant */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["Restaurant"];
        };
      };
      responses: {
        /** @description Restaurant created */
        201: {
          content: {
            "application/json": components["schemas"]["Restaurant"];
          };
        };
      };
    };
  };
  "/api/restaurants/owner/{userId}": {
    /** Get restaurant by owner ID */
    get: {
      parameters: {
        path: {
          userId: string;
        };
      };
      responses: {
        /** @description Restaurant for owner */
        200: {
          content: {
            "application/json": components["schemas"]["Restaurant"];
          };
        };
      };
    };
  };
  "/api/restaurants/owner-restaurants/{userId}": {
    /** Get all restaurants for an owner */
    get: {
      parameters: {
        path: {
          userId: string;
        };
      };
      responses: {
        /** @description List of restaurants for owner */
        200: {
          content: {
            "application/json": components["schemas"]["Restaurant"][];
          };
        };
      };
    };
  };
  "/api/restaurants/search": {
    /** Search restaurants by name */
    get: {
      parameters: {
        query?: {
          name?: string;
        };
      };
      responses: {
        /** @description List of matching restaurants */
        200: {
          content: {
            "application/json": components["schemas"]["Restaurant"][];
          };
        };
      };
    };
  };
  "/api/restaurants/{id}": {
    /** Get restaurant by ID */
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Restaurant details */
        200: {
          content: {
            "application/json": components["schemas"]["Restaurant"];
          };
        };
      };
    };
    /** Update restaurant */
    put: {
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["Restaurant"];
        };
      };
      responses: {
        /** @description Restaurant updated */
        200: {
          content: {
            "application/json": components["schemas"]["Restaurant"];
          };
        };
      };
    };
    /** Delete restaurant */
    delete: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Restaurant deleted */
        204: {
          content: never;
        };
      };
    };
  };
  "/api/food-catalogue/restaurant/{restaurantId}/catalogue/{foodId}": {
    /** Get food catalogue item by ID */
    get: {
      parameters: {
        path: {
          restaurantId: string;
          foodId: string;
        };
      };
      responses: {
        /** @description Food catalogue item */
        200: {
          content: {
            "application/json": components["schemas"]["FoodCatalogue"];
          };
        };
      };
    };
    /** Update food catalogue item */
    put: {
      parameters: {
        path: {
          restaurantId: string;
          foodId: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["FoodCatalogue"];
        };
      };
      responses: {
        /** @description Food catalogue item updated */
        200: {
          content: {
            "application/json": components["schemas"]["FoodCatalogue"];
          };
        };
      };
    };
    /** Delete food catalogue item */
    delete: {
      parameters: {
        path: {
          restaurantId: string;
          foodId: string;
        };
      };
      responses: {
        /** @description Food catalogue item deleted */
        204: {
          content: never;
        };
      };
    };
  };
  "/api/food-catalogue/restaurant/{restaurantId}": {
    /** Get all food catalogue items for a restaurant */
    get: {
      parameters: {
        path: {
          restaurantId: string;
        };
      };
      responses: {
        /** @description List of food catalogue items */
        200: {
          content: {
            "application/json": components["schemas"]["FoodCatalogue"][];
          };
        };
      };
    };
  };
  "/api/food-catalogue": {
    /** Create a new food catalogue item */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["FoodCatalogue"];
        };
      };
      responses: {
        /** @description Food catalogue item created */
        201: {
          content: {
            "application/json": components["schemas"]["FoodCatalogue"];
          };
        };
      };
    };
  };
  "/api/notifications/{userId}": {
    /** Get notifications for a user */
    get: {
      parameters: {
        path: {
          userId: string;
        };
      };
      responses: {
        /** @description List of notifications */
        200: {
          content: {
            "application/json": components["schemas"]["Notification"][];
          };
        };
      };
    };
  };
  "/api/notifications/{userId}/{notificationId}/read": {
    /** Mark a notification as read */
    patch: {
      parameters: {
        path: {
          userId: string;
          notificationId: string;
        };
      };
      responses: {
        /** @description Notification marked as read */
        200: {
          content: {
            "application/json": components["schemas"]["Notification"];
          };
        };
      };
    };
  };
  "/api/notifications/{userId}/read-all": {
    /** Mark all notifications as read */
    patch: {
      parameters: {
        path: {
          userId: string;
        };
      };
      responses: {
        /** @description All notifications marked as read */
        200: {
          content: {
            "application/json": {
              /** @example All notifications marked as read */
              message?: string;
              /** @example 5 */
              updatedCount?: number;
            };
          };
        };
      };
    };
  };
  "/api/restaurant-access/{restaurantId}": {
    /** Request access to a restaurant */
    post: {
      parameters: {
        path: {
          restaurantId: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            userId?: string;
          };
        };
      };
      responses: {
        /** @description Access request created */
        201: {
          content: {
            "application/json": components["schemas"]["RestaurantAccess"];
          };
        };
      };
    };
  };
  "/api/restaurant-access/user/{userId}": {
    /** Get restaurant access by user ID */
    get: {
      parameters: {
        path: {
          userId: string;
        };
      };
      responses: {
        /** @description List of restaurant access for user */
        200: {
          content: {
            "application/json": components["schemas"]["RestaurantAccess"][];
          };
        };
      };
    };
  };
  "/api/restaurant-access/owner/{ownerId}": {
    /** Get restaurant access by owner ID */
    get: {
      parameters: {
        path: {
          ownerId: string;
        };
      };
      responses: {
        /** @description List of restaurant access for owner */
        200: {
          content: {
            "application/json": components["schemas"]["RestaurantAccess"][];
          };
        };
      };
    };
  };
  "/api/restaurant-access/access/{accessId}/grant": {
    /** Grant restaurant access */
    patch: {
      parameters: {
        path: {
          accessId: string;
        };
      };
      responses: {
        /** @description Access granted */
        200: {
          content: {
            "application/json": components["schemas"]["RestaurantAccess"];
          };
        };
      };
    };
  };
  "/api/restaurant-access/access/{accessId}/suspend": {
    /** Suspend restaurant access */
    patch: {
      parameters: {
        path: {
          accessId: string;
        };
      };
      responses: {
        /** @description Access suspended */
        200: {
          content: {
            "application/json": components["schemas"]["RestaurantAccess"];
          };
        };
      };
    };
  };
  "/api/restaurant-access/access/{accessId}/delete": {
    /** Delete restaurant access */
    patch: {
      parameters: {
        path: {
          accessId: string;
        };
      };
      responses: {
        /** @description Access deleted */
        200: {
          content: {
            "application/json": components["schemas"]["RestaurantAccess"];
          };
        };
      };
    };
  };
  "/api/restaurant-access/access/{accessId}/update": {
    /** Update restaurant access role */
    patch: {
      parameters: {
        path: {
          accessId: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            role?: string;
          };
        };
      };
      responses: {
        /** @description Access role updated */
        200: {
          content: {
            "application/json": components["schemas"]["RestaurantAccess"];
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    ErrorResponse: {
      /**
       * @description A human-readable description of the error.
       * @example An unexpected error has occured
       */
      message?: string;
      /**
       * @description Detailed error message.
       * @example Database connection failed
       */
      error?: string;
    };
    User: {
      /**
       * @description Unique identifier for the user
       * @example 507f1f77bcf86cd799439011
       */
      _id?: string;
      /** @example anthony_ukutegbe */
      username?: string;
      /** @example +2347012345678 */
      phone?: string;
      /** @example Anthony Ukutegbe */
      name: string;
      /**
       * Format: email
       * @example anthony@test.com
       */
      email: string;
      /** @example Lagos */
      hometown?: string;
      /** @example Abuja */
      currentCity?: string;
      /** @example Nigeria */
      country?: string;
      /** @example https://example.com/avatar.jpg */
      imageUrl?: string;
      /** @example 123, Some Street, City */
      address?: string;
      /**
       * Format: password
       * @example strongPassword123
       */
      password: string;
      /** @example false */
      isVerified?: boolean;
      /** @example userTypeId */
      userType: string;
      /**
       * Format: date-time
       * @example 2025-04-20T15:30:00Z
       */
      createdAt?: string;
      /**
       * Format: date-time
       * @example 2025-04-20T15:30:00Z
       */
      updatedAt?: string;
    };
    Allergen: {
      /** @example egg */
      name?: string;
      /** @example allergic reaction to eggs and food that has egg content */
      description?: string;
    };
    Course: {
      /** @example main */
      name?: string;
      /** @example Main course in a meal */
      description?: string;
    };
    Cuisine: {
      /** @example Nigerian */
      name?: string;
      /** @example A Type of meal based on region of origin */
      description?: string;
    };
    BusinessHour: {
      /** @enum {string} */
      day?: "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday" | "Sunday";
      /** @description Opening time in HH:mm format */
      open?: string;
      /** @description Closing time in HH:mm format */
      close?: string;
      /**
       * @description Indicates if the restaurant is closed on this day
       * @default false
       */
      closed?: boolean;
    };
    Restaurant: {
      /** @description Unique identifier for the restaurant owner */
      ownerId: string;
      /** @description Name of the restaurant */
      name: string;
      /**
       * Format: uri
       * @description URL to the restaurant's logo image
       */
      logo?: string;
      /** @description Brief description of the restaurant */
      description?: string;
      /** @description List of cuisines offered by the restaurant */
      cuisine?: string[];
      /**
       * @description Price range of the restaurant
       * @enum {string}
       */
      priceRange?: "$" | "$$" | "$$$" | "$$$$";
      /** @description Physical address of the restaurant */
      address?: string;
      /** @description Contact phone number */
      phone?: string;
      /**
       * Format: email
       * @description Contact email address
       */
      email?: string;
      /**
       * Format: uri
       * @description Website URL of the restaurant
       */
      website?: string;
      /** @description Operating hours for each day of the week */
      businessHours?: components["schemas"]["BusinessHour"][];
      /** @description List of features available at the restaurant */
      features?: ("Outdoor seating" | "Dining area" | "Take-out" | "Delivery" | "Catering" | "Wifi" | "Parking")[];
      /** @description URLs to images in the restaurant's gallery */
      gallery?: string[];
      /** @description Additional metadata associated with the restaurant */
      meta?: {
        [key: string]: unknown;
      };
    };
    Price: {
      /**
       * @description The price amount
       * @example 25.99
       */
      amount: number;
      /**
       * @description Currency type
       * @example USD
       * @enum {string}
       */
      currency: "USD" | "EUR" | "GBP" | "CAD" | "AUD" | "JPY" | "CNY" | "KRW" | "MYR" | "TWD" | "VND" | "THB" | "ZAR";
    };
    FoodCatalogue: {
      /**
       * @description The name of the food item
       * @example Spaghetti Bolognese
       */
      name: string;
      /**
       * @description List of ingredients used in the food item
       * @example [
       *   "Spaghetti",
       *   "Ground beef",
       *   "Tomato sauce"
       * ]
       */
      ingredients: string[];
      /**
       * @description Cuisine type the food belongs to
       * @example Italian
       */
      cuisineType: string;
      /**
       * @description List of allergens associated with the food
       * @example [
       *   "Gluten",
       *   "Dairy"
       * ]
       */
      allergens?: string[];
      /**
       * @description Course type the food belongs to (e.g., starter, main)
       * @example Main course
       */
      course: string;
      /** @description Price details for the food item */
      price: components["schemas"]["Price"];
      /**
       * @description List of image URLs for the food item
       * @example [
       *   "https://example.com/images/spaghetti-bolognese-1.jpg",
       *   "https://example.com/images/spaghetti-bolognese-2.jpg"
       * ]
       */
      images: string[];
      /**
       * @description ID of the restaurant offering the food item
       * @example restaurant12345
       */
      restaurant: string;
    };
    Notification: {
      /**
       * @description Unique identifier for the notification
       * @example notif_12345
       */
      id: string;
      /**
       * @description ID of the user who owns this notification
       * @example user_12345
       */
      userId: string;
      /**
       * @description Type of notification
       * @example access_request
       * @enum {string}
       */
      type: "access_request" | "access_granted" | "access_denied" | "access_suspended" | "restaurant_update" | "system";
      /**
       * @description Notification title
       * @example Access Request
       */
      title?: string;
      /**
       * @description Notification message
       * @example Your access request for Restaurant ABC has been approved
       */
      message: string;
      /**
       * @description Whether the notification has been read
       * @default false
       * @example false
       */
      isRead?: boolean;
      /**
       * @description Additional data related to the notification
       * @example {
       *   "restaurantId": "rest_12345",
       *   "restaurantName": "Restaurant ABC"
       * }
       */
      metadata?: {
        [key: string]: unknown;
      };
      /**
       * Format: date-time
       * @description When the notification was created
       * @example 2025-04-20T15:30:00Z
       */
      createdAt?: string;
      /**
       * Format: date-time
       * @description When the notification was last updated
       * @example 2025-04-20T15:30:00Z
       */
      updatedAt?: string;
    };
    RestaurantAccess: {
      /**
       * @description Unique identifier for the access record
       * @example access_12345
       */
      id: string;
      /**
       * @description ID of the user requesting access
       * @example user_12345
       */
      userId: string;
      /**
       * @description ID of the restaurant
       * @example rest_12345
       */
      restaurantId: string;
      /**
       * @description Current status of the access request
       * @example pending
       * @enum {string}
       */
      status: "pending" | "granted" | "denied" | "suspended";
      /**
       * @description Role assigned to the user
       * @example viewer
       * @enum {string}
       */
      role?: "viewer" | "editor" | "admin" | "owner";
      /**
       * Format: date-time
       * @description When the access was requested
       * @example 2025-04-20T15:30:00Z
       */
      requestedAt?: string;
      /**
       * Format: date-time
       * @description When the access was granted (if applicable)
       * @example 2025-04-20T16:00:00Z
       */
      grantedAt?: string;
      /**
       * @description ID of the user who granted access
       * @example owner_12345
       */
      grantedBy?: string;
      /**
       * Format: date-time
       * @description When the access expires (if applicable)
       * @example 2025-12-31T23:59:59Z
       */
      expiresAt?: string;
      /**
       * @description Additional notes about the access
       * @example Temporary access for project collaboration
       */
      notes?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
