openapi: "3.0.0"
info:
  version: 1.0.0
  title: "BiteScout API"
  description: "API documentation for BiteScout"
servers:
  - url: http://localhost:5001
paths:
  /api/auth/register:
   
    post:
      summary: Register a new user
      description: Register a new user with the provided details
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - firstName
                - lastName
                - email
                - password
              properties:
                firstName:
                  type: string
                  example: Anthony
                lastName:
                  type: string
                  example: Ukutegbe
                email:
                  type: string
                  format: email
                  example: anthony@test.com
                password:
                  type: string
                  format: password
                  example: strongPassword123

      responses:
        201:
          description: Successfully registered user
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Registration successful
                  user:
                    type: object
                    properties:
                      name:
                        type: string
                        example: Anthony Ukutegbe
                      email:
                        type: string
                        format: email
                        example: anthony@test.com
                      userType:
                        type: object
                        properties:
                          name:
                            type: string
                            example: user
                          level:
                            type: number
                            example: 1
                          description:
                            type: string
                            example: an ordinary user with restaurnat access
        400:
          description: Missing required field or invalid user type
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Missing required field or user type not found
        409:
          description: Conflict â€“ User already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User already exists
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                userCreationError:
                  summary: Error creating User
                  value:
                    message: Error creating user
                    error: Database conection failed
  /api/auth/login:
    summary: Authenticate a user
    description: Authenticate a user and return access and refresh token
    post:  # Changed from get to post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: anthony@test.com
                password:
                  type: string
                  format: password
                  example: strongPassword123
      responses:
        200:
          description: Login Successfull
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Login successful
                  user:
                    $ref: "#/components/schemas/User"
                  accessToken:
                    type: string
                    example: -access token here-
                  refreshToken:
                    type: string
                    example: -refresh token here-
                  expiresIn:
                    type: integer
                    format: int64
                    description: "Expiration time as a Unix timestamp in milliseconds"
                    example: 1713649200000
        400:
          description: Missing required field or invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Missing required fields
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /api/auth/refresh:
    summary: Refresh authentication token
    description: Refreshes the authentication token with the provided refresh token
    post:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refreshToken
              properties:
                refreshToken:
                  type: string
                  example: -refresh token here-

      responses:
        200:
          description: Token refresh successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Refresh Token Successfull
                  accessToken:
                    type: string
                    example: -new access token here-
                  refreshToken:
                    type: string
                    example: -new refresh token here-
                  expiresIn:
                    type: integer
                    format: int64
                    description: Expiration time as a Unix timestamp in milliseconds
                    example: 1713649200000
        400:
          description: Refresh token not found or Invalid Token
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Refresh token not found
              examples:
                missingToken:
                  summary: Missing token
                  value:
                    message: Refresh token not found
                invalidToken:
                  summary: Invalid refresh token
                  value:
                    message: Invalid refresh token
        401:
          description: Internal Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid Refresh Token Request
  /api/user/{userId}:
    summary: Update a user
    put:
      parameters:
        - in: path
          name: userId
          required: true
          description: The ID of the user to update
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        200:
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /api/restaurants:
    post:
      summary: Create a new restaurant
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Restaurant"
      responses:
        201:
          description: Restaurant created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Restaurant"
    get:
      summary: Get all restaurants
      responses:
        200:
          description: List of restaurants
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Restaurant"
  /api/restaurants/owner/{userId}:
    get:
      summary: Get restaurant by owner ID
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        200:
          description: Restaurant for owner
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Restaurant"
  /api/restaurants/owner-restaurants/{userId}:
    get:
      summary: Get all restaurants for an owner
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        200:
          description: List of restaurants for owner
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Restaurant"
  /api/restaurants/search:
    get:
      summary: Search restaurants by name
      parameters:
        - in: query
          name: name
          required: false
          schema:
            type: string
      responses:
        200:
          description: List of matching restaurants
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Restaurant"
  /api/restaurants/{id}:
    get:
      summary: Get restaurant by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        200:
          description: Restaurant details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Restaurant"
    put:
      summary: Update restaurant
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Restaurant"
      responses:
        200:
          description: Restaurant updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Restaurant"
    delete:
      summary: Delete restaurant
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        204:
          description: Restaurant deleted
  /api/food-catalogue/restaurant/{restaurantId}/catalogue/{foodId}:
    get:
      summary: Get food catalogue item by ID
      parameters:
        - in: path
          name: restaurantId
          required: true
          schema:
            type: string
        - in: path
          name: foodId
          required: true
          schema:
            type: string
      responses:
        200:
          description: Food catalogue item
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FoodCatalogue"
    put:
      summary: Update food catalogue item
      parameters:
        - in: path
          name: restaurantId
          required: true
          schema:
            type: string
        - in: path
          name: foodId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FoodCatalogue"
      responses:
        200:
          description: Food catalogue item updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FoodCatalogue"
    delete:
      summary: Delete food catalogue item
      parameters:
        - in: path
          name: restaurantId
          required: true
          schema:
            type: string
        - in: path
          name: foodId
          required: true
          schema:
            type: string
      responses:
        204:
          description: Food catalogue item deleted
  /api/food-catalogue/restaurant/{restaurantId}:
    get:
      summary: Get all food catalogue items for a restaurant
      parameters:
        - in: path
          name: restaurantId
          required: true
          schema:
            type: string
      responses:
        200:
          description: List of food catalogue items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FoodCatalogue"
  /api/food-catalogue:
    post:
      summary: Create a new food catalogue item
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FoodCatalogue"
      responses:
        201:
          description: Food catalogue item created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FoodCatalogue"
  /api/notifications/{userId}:
    get:
      summary: Get notifications for a user
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        200:
          description: List of notifications
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Notification"
  /api/notifications/{userId}/{notificationId}/read:
    patch:
      summary: Mark a notification as read
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
        - in: path
          name: notificationId
          required: true
          schema:
            type: string
      responses:
        200:
          description: Notification marked as read
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Notification"
  /api/notifications/{userId}/read-all:
    patch:
      summary: Mark all notifications as read
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        200:
          description: All notifications marked as read
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "All notifications marked as read"
                  updatedCount:
                    type: integer
                    example: 5
  /api/restaurant-access/{restaurantId}:
    post:
      summary: Request access to a restaurant
      parameters:
        - in: path
          name: restaurantId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
      responses:
        201:
          description: Access request created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestaurantAccess"
  /api/restaurant-access/user/{userId}:
    get:
      summary: Get restaurant access by user ID
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        200:
          description: List of restaurant access for user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RestaurantAccess"
  /api/restaurant-access/owner/{ownerId}:
    get:
      summary: Get restaurant access by owner ID
      parameters:
        - in: path
          name: ownerId
          required: true
          schema:
            type: string
      responses:
        200:
          description: List of restaurant access for owner
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RestaurantAccess"
  /api/restaurant-access/access/{accessId}/grant:
    patch:
      summary: Grant restaurant access
      parameters:
        - in: path
          name: accessId
          required: true
          schema:
            type: string
      responses:
        200:
          description: Access granted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestaurantAccess"
  /api/restaurant-access/access/{accessId}/suspend:
    patch:
      summary: Suspend restaurant access
      parameters:
        - in: path
          name: accessId
          required: true
          schema:
            type: string
      responses:
        200:
          description: Access suspended
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestaurantAccess"
  /api/restaurant-access/access/{accessId}/delete:
    patch:
      summary: Delete restaurant access
      parameters:
        - in: path
          name: accessId
          required: true
          schema:
            type: string
      responses:
        200:
          description: Access deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestaurantAccess"
  /api/restaurant-access/access/{accessId}/update:
    patch:
      summary: Update restaurant access role
      parameters:
        - in: path
          name: accessId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                role:
                  type: string
      responses:
        200:
          description: Access role updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestaurantAccess"

components:
  schemas:
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          description: A human-readable description of the error.
          example: An unexpected error has occured
        error:
          type: string
          description: Detailed error message.
          example: "Database connection failed"

    User:
      type: object
      properties:
        username:
          type: string
          example: anthony_ukutegbe
        phone:
          type: string
          example: "+2347012345678"
        name:
          type: string
          example: Anthony Ukutegbe
        email:
          type: string
          format: email
          example: anthony@test.com
        hometown:
          type: string
          example: Lagos
        currentCity:
          type: string
          example: Abuja
        country:
          type: string
          example: Nigeria
        imageUrl:
          type: string
          example: https://example.com/avatar.jpg
        address:
          type: string
          example: "123, Some Street, City"
        password:
          type: string
          format: password
          example: strongPassword123
        isVerified:
          type: boolean
          example: false
        userType:
          type: string
          example: userTypeId
        createdAt:
          type: string
          format: date-time
          example: "2025-04-20T15:30:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2025-04-20T15:30:00Z"
      required:
        - name
        - email
        - password
        - userType
    Allergen:
      type: object
      properties:
        name:
          type: string
          example: egg
        description:
          type: string
          example: allergic reaction to eggs and food that has egg content
    Course:
      type: object
      properties:
        name:
          type: string
          example: main
        description:
          type: string
          example: Main course in a meal
    Cuisine:
      type: object
      properties:
        name:
          type: string
          example: Nigerian
        description:
          type: string
          example: A Type of meal based on region of origin
    BusinessHour:
      type: object
      properties:
        day:
          type: string
          enum:
            - Monday
            - Tuesday
            - Wednesday
            - Thursday
            - Friday
            - Saturday
            - Sunday
        open:
          type: string
          pattern: "^([01]\\d|2[0-3]):([0-5]\\d)$"
          description: "Opening time in HH:mm format"
        close:
          type: string
          pattern: "^([01]\\d|2[0-3]):([0-5]\\d)$"
          description: "Closing time in HH:mm format"
        closed:
          type: boolean
          default: false
          description: "Indicates if the restaurant is closed on this day"
    Restaurant:
      type: object
      required:
        - ownerId
        - name
      properties:
        ownerId:
          type: string
          description: "Unique identifier for the restaurant owner"
        name:
          type: string
          description: "Name of the restaurant"
        logo:
          type: string
          format: uri
          description: "URL to the restaurant's logo image"
        description:
          type: string
          description: "Brief description of the restaurant"
        cuisine:
          type: array
          items:
            type: string
          description: "List of cuisines offered by the restaurant"
        priceRange:
          type: string
          enum:
            - "$"
            - "$$"
            - "$$$"
            - "$$$$"
          description: "Price range of the restaurant"
        address:
          type: string
          description: "Physical address of the restaurant"
        phone:
          type: string
          pattern: "^\\+?[\\d\\s-()]+$"
          description: "Contact phone number"
        email:
          type: string
          format: email
          description: "Contact email address"
        website:
          type: string
          format: uri
          description: "Website URL of the restaurant"
        businessHours:
          type: array
          items:
            $ref: "#/components/schemas/BusinessHour"
          description: "Operating hours for each day of the week"
        features:
          type: array
          items:
            type: string
            enum:
              - "Outdoor seating"
              - "Dining area"
              - "Take-out"
              - "Delivery"
              - "Catering"
              - "Wifi"
              - "Parking"
          description: "List of features available at the restaurant"
        gallery:
          type: array
          items:
            type: string
            format: uri
          description: "URLs to images in the restaurant's gallery"
        meta:
          type: object
          additionalProperties: true
          description: "Additional metadata associated with the restaurant"

    Price:
      type: object
      required:
        - amount
        - currency
      properties:
        amount:
          type: number
          description: "The price amount"
          example: 25.99
        currency:
          type: string
          enum:
            - USD
            - EUR
            - GBP
            - CAD
            - AUD
            - JPY
            - CNY
            - KRW
            - MYR
            - TWD
            - VND
            - THB
            - ZAR
          description: "Currency type"
          example: "USD"

    FoodCatalogue:
      type: object
      required:
        - name
        - ingredients
        - cuisineType
        - course
        - price
        - images
        - restaurant
      properties:
        name:
          type: string
          description: "The name of the food item"
          example: "Spaghetti Bolognese"
        ingredients:
          type: array
          items:
            type: string
          description: "List of ingredients used in the food item"
          example:
            - "Spaghetti"
            - "Ground beef"
            - "Tomato sauce"
        cuisineType:
          type: string
          description: "Cuisine type the food belongs to"
          example: "Italian"
        allergens:
          type: array
          items:
            type: string
          description: "List of allergens associated with the food"
          example:
            - "Gluten"
            - "Dairy"
        course:
          type: string
          description: "Course type the food belongs to (e.g., starter, main)"
          example: "Main course"
        price:
          $ref: "#/components/schemas/Price"
          description: "Price details for the food item"
        images:
          type: array
          items:
            type: string
            format: uri
          description: "List of image URLs for the food item"
          example:
            - "https://example.com/images/spaghetti-bolognese-1.jpg"
            - "https://example.com/images/spaghetti-bolognese-2.jpg"
        restaurant:
          type: string
          description: "ID of the restaurant offering the food item"
          example: "restaurant12345"

    Notification:
      type: object
      required:
        - id
        - userId
        - type
        - message
      properties:
        id:
          type: string
          description: "Unique identifier for the notification"
          example: "notif_12345"
        userId:
          type: string
          description: "ID of the user who owns this notification"
          example: "user_12345"
        type:
          type: string
          enum:
            - "access_request"
            - "access_granted"
            - "access_denied"
            - "access_suspended"
            - "restaurant_update"
            - "system"
          description: "Type of notification"
          example: "access_request"
        title:
          type: string
          description: "Notification title"
          example: "Access Request"
        message:
          type: string
          description: "Notification message"
          example: "Your access request for Restaurant ABC has been approved"
        isRead:
          type: boolean
          default: false
          description: "Whether the notification has been read"
          example: false
        metadata:
          type: object
          additionalProperties: true
          description: "Additional data related to the notification"
          example:
            restaurantId: "rest_12345"
            restaurantName: "Restaurant ABC"
        createdAt:
          type: string
          format: date-time
          description: "When the notification was created"
          example: "2025-04-20T15:30:00Z"
        updatedAt:
          type: string
          format: date-time
          description: "When the notification was last updated"
          example: "2025-04-20T15:30:00Z"

    RestaurantAccess:
      type: object
      required:
        - id
        - userId
        - restaurantId
        - status
      properties:
        id:
          type: string
          description: "Unique identifier for the access record"
          example: "access_12345"
        userId:
          type: string
          description: "ID of the user requesting access"
          example: "user_12345"
        restaurantId:
          type: string
          description: "ID of the restaurant"
          example: "rest_12345"
        status:
          type: string
          enum:
            - "pending"
            - "granted"
            - "denied"
            - "suspended"
          description: "Current status of the access request"
          example: "pending"
        role:
          type: string
          enum:
            - "viewer"
            - "editor"
            - "admin"
            - "owner"
          description: "Role assigned to the user"
          example: "viewer"
        requestedAt:
          type: string
          format: date-time
          description: "When the access was requested"
          example: "2025-04-20T15:30:00Z"
        grantedAt:
          type: string
          format: date-time
          description: "When the access was granted (if applicable)"
          example: "2025-04-20T16:00:00Z"
        grantedBy:
          type: string
          description: "ID of the user who granted access"
          example: "owner_12345"
        expiresAt:
          type: string
          format: date-time
          description: "When the access expires (if applicable)"
          example: "2025-12-31T23:59:59Z"
        notes:
          type: string
          description: "Additional notes about the access"
          example: "Temporary access for project collaboration"